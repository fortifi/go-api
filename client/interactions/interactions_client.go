// Code generated by go-swagger; DO NOT EDIT.

package interactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new interactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for interactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInteractionsInteractionFidMessage(params *GetInteractionsInteractionFidMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInteractionFidMessageOK, error)

	PostInteractionsInteractionFidClientConnected(params *PostInteractionsInteractionFidClientConnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientConnectedOK, error)

	PostInteractionsInteractionFidClientDisconnected(params *PostInteractionsInteractionFidClientDisconnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientDisconnectedOK, error)

	PostInteractionsInteractionFidMessage(params *PostInteractionsInteractionFidMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidMessageOK, error)

	PostInteractionsJourney(params *PostInteractionsJourneyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsJourneyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetInteractionsInteractionFidMessage gets all messages on an interaction
*/
func (a *Client) GetInteractionsInteractionFidMessage(params *GetInteractionsInteractionFidMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInteractionFidMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInteractionsInteractionFidMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInteractionsInteractionFidMessage",
		Method:             "GET",
		PathPattern:        "/interactions/{interactionFid}/message",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInteractionsInteractionFidMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInteractionsInteractionFidMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInteractionsInteractionFidMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidClientConnected as client has connected to the interaction
*/
func (a *Client) PostInteractionsInteractionFidClientConnected(params *PostInteractionsInteractionFidClientConnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientConnectedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidClientConnectedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidClientConnected",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/client-connected",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidClientConnectedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidClientConnectedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidClientConnectedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidClientDisconnected as client has disconnected from the interaction
*/
func (a *Client) PostInteractionsInteractionFidClientDisconnected(params *PostInteractionsInteractionFidClientDisconnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientDisconnectedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidClientDisconnectedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidClientDisconnected",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/client-disconnected",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidClientDisconnectedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidClientDisconnectedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidClientDisconnectedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidMessage adds a message to a interaction
*/
func (a *Client) PostInteractionsInteractionFidMessage(params *PostInteractionsInteractionFidMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidMessage",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/message",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsJourney creates a customer journey
*/
func (a *Client) PostInteractionsJourney(params *PostInteractionsJourneyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsJourneyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsJourneyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsJourney",
		Method:             "POST",
		PathPattern:        "/interactions/journey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsJourneyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsJourneyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsJourneyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
