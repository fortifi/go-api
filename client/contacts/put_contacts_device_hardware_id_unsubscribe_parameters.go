// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutContactsDeviceHardwareIDUnsubscribeParams creates a new PutContactsDeviceHardwareIDUnsubscribeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutContactsDeviceHardwareIDUnsubscribeParams() *PutContactsDeviceHardwareIDUnsubscribeParams {
	return &PutContactsDeviceHardwareIDUnsubscribeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutContactsDeviceHardwareIDUnsubscribeParamsWithTimeout creates a new PutContactsDeviceHardwareIDUnsubscribeParams object
// with the ability to set a timeout on a request.
func NewPutContactsDeviceHardwareIDUnsubscribeParamsWithTimeout(timeout time.Duration) *PutContactsDeviceHardwareIDUnsubscribeParams {
	return &PutContactsDeviceHardwareIDUnsubscribeParams{
		timeout: timeout,
	}
}

// NewPutContactsDeviceHardwareIDUnsubscribeParamsWithContext creates a new PutContactsDeviceHardwareIDUnsubscribeParams object
// with the ability to set a context for a request.
func NewPutContactsDeviceHardwareIDUnsubscribeParamsWithContext(ctx context.Context) *PutContactsDeviceHardwareIDUnsubscribeParams {
	return &PutContactsDeviceHardwareIDUnsubscribeParams{
		Context: ctx,
	}
}

// NewPutContactsDeviceHardwareIDUnsubscribeParamsWithHTTPClient creates a new PutContactsDeviceHardwareIDUnsubscribeParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutContactsDeviceHardwareIDUnsubscribeParamsWithHTTPClient(client *http.Client) *PutContactsDeviceHardwareIDUnsubscribeParams {
	return &PutContactsDeviceHardwareIDUnsubscribeParams{
		HTTPClient: client,
	}
}

/*
PutContactsDeviceHardwareIDUnsubscribeParams contains all the parameters to send to the API endpoint

	for the put contacts device hardware ID unsubscribe operation.

	Typically these are written to a http.Request.
*/
type PutContactsDeviceHardwareIDUnsubscribeParams struct {

	/* BrandFid.

	   Brand to unsubscribe the device from
	*/
	BrandFid *string

	/* EntityFid.

	   Entity to unsubscribe the device from (Fid)
	*/
	EntityFid *string

	/* GroupFid.

	   Group to unsubscribe the device from
	*/
	GroupFid *string

	/* HardwareID.

	   Hardware ID
	*/
	HardwareID string

	/* UnsubscribeType.

	   Unsubscribe Level
	*/
	UnsubscribeType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put contacts device hardware ID unsubscribe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithDefaults() *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put contacts device hardware ID unsubscribe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithTimeout(timeout time.Duration) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithContext(ctx context.Context) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithHTTPClient(client *http.Client) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBrandFid adds the brandFid to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithBrandFid(brandFid *string) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetBrandFid(brandFid)
	return o
}

// SetBrandFid adds the brandFid to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetBrandFid(brandFid *string) {
	o.BrandFid = brandFid
}

// WithEntityFid adds the entityFid to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithEntityFid(entityFid *string) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetEntityFid(entityFid)
	return o
}

// SetEntityFid adds the entityFid to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetEntityFid(entityFid *string) {
	o.EntityFid = entityFid
}

// WithGroupFid adds the groupFid to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithGroupFid(groupFid *string) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetGroupFid(groupFid)
	return o
}

// SetGroupFid adds the groupFid to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetGroupFid(groupFid *string) {
	o.GroupFid = groupFid
}

// WithHardwareID adds the hardwareID to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithHardwareID(hardwareID string) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetHardwareID(hardwareID)
	return o
}

// SetHardwareID adds the hardwareId to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetHardwareID(hardwareID string) {
	o.HardwareID = hardwareID
}

// WithUnsubscribeType adds the unsubscribeType to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WithUnsubscribeType(unsubscribeType *string) *PutContactsDeviceHardwareIDUnsubscribeParams {
	o.SetUnsubscribeType(unsubscribeType)
	return o
}

// SetUnsubscribeType adds the unsubscribeType to the put contacts device hardware ID unsubscribe params
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) SetUnsubscribeType(unsubscribeType *string) {
	o.UnsubscribeType = unsubscribeType
}

// WriteToRequest writes these params to a swagger request
func (o *PutContactsDeviceHardwareIDUnsubscribeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BrandFid != nil {

		// form param brandFid
		var frBrandFid string
		if o.BrandFid != nil {
			frBrandFid = *o.BrandFid
		}
		fBrandFid := frBrandFid
		if fBrandFid != "" {
			if err := r.SetFormParam("brandFid", fBrandFid); err != nil {
				return err
			}
		}
	}

	if o.EntityFid != nil {

		// form param entityFid
		var frEntityFid string
		if o.EntityFid != nil {
			frEntityFid = *o.EntityFid
		}
		fEntityFid := frEntityFid
		if fEntityFid != "" {
			if err := r.SetFormParam("entityFid", fEntityFid); err != nil {
				return err
			}
		}
	}

	if o.GroupFid != nil {

		// form param groupFid
		var frGroupFid string
		if o.GroupFid != nil {
			frGroupFid = *o.GroupFid
		}
		fGroupFid := frGroupFid
		if fGroupFid != "" {
			if err := r.SetFormParam("groupFid", fGroupFid); err != nil {
				return err
			}
		}
	}

	// path param hardwareId
	if err := r.SetPathParam("hardwareId", o.HardwareID); err != nil {
		return err
	}

	if o.UnsubscribeType != nil {

		// form param unsubscribeType
		var frUnsubscribeType string
		if o.UnsubscribeType != nil {
			frUnsubscribeType = *o.UnsubscribeType
		}
		fUnsubscribeType := frUnsubscribeType
		if fUnsubscribeType != "" {
			if err := r.SetFormParam("unsubscribeType", fUnsubscribeType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
