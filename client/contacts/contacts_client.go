// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new contacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetContactsFindByReferenceContactReference(params *GetContactsFindByReferenceContactReferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetContactsFindByReferenceContactReferenceOK, error)

	PutContactsDeviceHardwareIDSubscribe(params *PutContactsDeviceHardwareIDSubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsDeviceHardwareIDSubscribeOK, error)

	PutContactsDeviceHardwareIDUnsubscribe(params *PutContactsDeviceHardwareIDUnsubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsDeviceHardwareIDUnsubscribeOK, error)

	PutContactsEmailsEmailAddressConfirm(params *PutContactsEmailsEmailAddressConfirmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsEmailsEmailAddressConfirmOK, error)

	PutContactsEmailsEmailAddressSubscribe(params *PutContactsEmailsEmailAddressSubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsEmailsEmailAddressSubscribeOK, error)

	PutContactsEmailsEmailAddressUnsubscribe(params *PutContactsEmailsEmailAddressUnsubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsEmailsEmailAddressUnsubscribeOK, error)

	PutContactsPhonePhoneNumberConfirm(params *PutContactsPhonePhoneNumberConfirmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsPhonePhoneNumberConfirmOK, error)

	PutMessengerDeliveriesDeliveryFidSubscribe(params *PutMessengerDeliveriesDeliveryFidSubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutMessengerDeliveriesDeliveryFidSubscribeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetContactsFindByReferenceContactReference finds a person with a reference
*/
func (a *Client) GetContactsFindByReferenceContactReference(params *GetContactsFindByReferenceContactReferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetContactsFindByReferenceContactReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactsFindByReferenceContactReferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetContactsFindByReferenceContactReference",
		Method:             "GET",
		PathPattern:        "/contacts/findByReference/{contactReference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContactsFindByReferenceContactReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactsFindByReferenceContactReferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetContactsFindByReferenceContactReferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutContactsDeviceHardwareIDSubscribe subscribes an device
*/
func (a *Client) PutContactsDeviceHardwareIDSubscribe(params *PutContactsDeviceHardwareIDSubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsDeviceHardwareIDSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactsDeviceHardwareIDSubscribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContactsDeviceHardwareIDSubscribe",
		Method:             "PUT",
		PathPattern:        "/contacts/device/{hardwareId}/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContactsDeviceHardwareIDSubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContactsDeviceHardwareIDSubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutContactsDeviceHardwareIDSubscribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutContactsDeviceHardwareIDUnsubscribe unsubscribes a device
*/
func (a *Client) PutContactsDeviceHardwareIDUnsubscribe(params *PutContactsDeviceHardwareIDUnsubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsDeviceHardwareIDUnsubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactsDeviceHardwareIDUnsubscribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContactsDeviceHardwareIDUnsubscribe",
		Method:             "PUT",
		PathPattern:        "/contacts/device/{hardwareId}/unsubscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContactsDeviceHardwareIDUnsubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContactsDeviceHardwareIDUnsubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutContactsDeviceHardwareIDUnsubscribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutContactsEmailsEmailAddressConfirm confirms email address
*/
func (a *Client) PutContactsEmailsEmailAddressConfirm(params *PutContactsEmailsEmailAddressConfirmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsEmailsEmailAddressConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactsEmailsEmailAddressConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContactsEmailsEmailAddressConfirm",
		Method:             "PUT",
		PathPattern:        "/contacts/emails/{emailAddress}/confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContactsEmailsEmailAddressConfirmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContactsEmailsEmailAddressConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutContactsEmailsEmailAddressConfirmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutContactsEmailsEmailAddressSubscribe subscribes an email address
*/
func (a *Client) PutContactsEmailsEmailAddressSubscribe(params *PutContactsEmailsEmailAddressSubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsEmailsEmailAddressSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactsEmailsEmailAddressSubscribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContactsEmailsEmailAddressSubscribe",
		Method:             "PUT",
		PathPattern:        "/contacts/emails/{emailAddress}/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContactsEmailsEmailAddressSubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContactsEmailsEmailAddressSubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutContactsEmailsEmailAddressSubscribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutContactsEmailsEmailAddressUnsubscribe unsubscribes an email address
*/
func (a *Client) PutContactsEmailsEmailAddressUnsubscribe(params *PutContactsEmailsEmailAddressUnsubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsEmailsEmailAddressUnsubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactsEmailsEmailAddressUnsubscribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContactsEmailsEmailAddressUnsubscribe",
		Method:             "PUT",
		PathPattern:        "/contacts/emails/{emailAddress}/unsubscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContactsEmailsEmailAddressUnsubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContactsEmailsEmailAddressUnsubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutContactsEmailsEmailAddressUnsubscribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutContactsPhonePhoneNumberConfirm confirms phone number
*/
func (a *Client) PutContactsPhonePhoneNumberConfirm(params *PutContactsPhonePhoneNumberConfirmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactsPhonePhoneNumberConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactsPhonePhoneNumberConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContactsPhonePhoneNumberConfirm",
		Method:             "PUT",
		PathPattern:        "/contacts/phone/{phoneNumber}/confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContactsPhonePhoneNumberConfirmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContactsPhonePhoneNumberConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutContactsPhonePhoneNumberConfirmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutMessengerDeliveriesDeliveryFidSubscribe subscribes an email based on the delivery fid
*/
func (a *Client) PutMessengerDeliveriesDeliveryFidSubscribe(params *PutMessengerDeliveriesDeliveryFidSubscribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutMessengerDeliveriesDeliveryFidSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMessengerDeliveriesDeliveryFidSubscribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutMessengerDeliveriesDeliveryFidSubscribe",
		Method:             "PUT",
		PathPattern:        "/messenger/deliveries/{deliveryFid}/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMessengerDeliveriesDeliveryFidSubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutMessengerDeliveriesDeliveryFidSubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutMessengerDeliveriesDeliveryFidSubscribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
