// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutContactsEmailsEmailAddressUnsubscribeParams creates a new PutContactsEmailsEmailAddressUnsubscribeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutContactsEmailsEmailAddressUnsubscribeParams() *PutContactsEmailsEmailAddressUnsubscribeParams {
	return &PutContactsEmailsEmailAddressUnsubscribeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutContactsEmailsEmailAddressUnsubscribeParamsWithTimeout creates a new PutContactsEmailsEmailAddressUnsubscribeParams object
// with the ability to set a timeout on a request.
func NewPutContactsEmailsEmailAddressUnsubscribeParamsWithTimeout(timeout time.Duration) *PutContactsEmailsEmailAddressUnsubscribeParams {
	return &PutContactsEmailsEmailAddressUnsubscribeParams{
		timeout: timeout,
	}
}

// NewPutContactsEmailsEmailAddressUnsubscribeParamsWithContext creates a new PutContactsEmailsEmailAddressUnsubscribeParams object
// with the ability to set a context for a request.
func NewPutContactsEmailsEmailAddressUnsubscribeParamsWithContext(ctx context.Context) *PutContactsEmailsEmailAddressUnsubscribeParams {
	return &PutContactsEmailsEmailAddressUnsubscribeParams{
		Context: ctx,
	}
}

// NewPutContactsEmailsEmailAddressUnsubscribeParamsWithHTTPClient creates a new PutContactsEmailsEmailAddressUnsubscribeParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutContactsEmailsEmailAddressUnsubscribeParamsWithHTTPClient(client *http.Client) *PutContactsEmailsEmailAddressUnsubscribeParams {
	return &PutContactsEmailsEmailAddressUnsubscribeParams{
		HTTPClient: client,
	}
}

/* PutContactsEmailsEmailAddressUnsubscribeParams contains all the parameters to send to the API endpoint
   for the put contacts emails email address unsubscribe operation.

   Typically these are written to a http.Request.
*/
type PutContactsEmailsEmailAddressUnsubscribeParams struct {

	/* BrandFid.

	   Brand to unsubscribe the email address from
	*/
	BrandFid *string

	/* EmailAddress.

	   Email Address
	*/
	EmailAddress string

	/* GroupFid.

	   Group to unsubscribe the email address from
	*/
	GroupFid *string

	/* UnsubscribeType.

	   Unsubscribe Level
	*/
	UnsubscribeType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put contacts emails email address unsubscribe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithDefaults() *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put contacts emails email address unsubscribe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithTimeout(timeout time.Duration) *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithContext(ctx context.Context) *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithHTTPClient(client *http.Client) *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBrandFid adds the brandFid to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithBrandFid(brandFid *string) *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetBrandFid(brandFid)
	return o
}

// SetBrandFid adds the brandFid to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetBrandFid(brandFid *string) {
	o.BrandFid = brandFid
}

// WithEmailAddress adds the emailAddress to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithEmailAddress(emailAddress string) *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetEmailAddress(emailAddress)
	return o
}

// SetEmailAddress adds the emailAddress to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetEmailAddress(emailAddress string) {
	o.EmailAddress = emailAddress
}

// WithGroupFid adds the groupFid to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithGroupFid(groupFid *string) *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetGroupFid(groupFid)
	return o
}

// SetGroupFid adds the groupFid to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetGroupFid(groupFid *string) {
	o.GroupFid = groupFid
}

// WithUnsubscribeType adds the unsubscribeType to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WithUnsubscribeType(unsubscribeType *string) *PutContactsEmailsEmailAddressUnsubscribeParams {
	o.SetUnsubscribeType(unsubscribeType)
	return o
}

// SetUnsubscribeType adds the unsubscribeType to the put contacts emails email address unsubscribe params
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) SetUnsubscribeType(unsubscribeType *string) {
	o.UnsubscribeType = unsubscribeType
}

// WriteToRequest writes these params to a swagger request
func (o *PutContactsEmailsEmailAddressUnsubscribeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BrandFid != nil {

		// form param brandFid
		var frBrandFid string
		if o.BrandFid != nil {
			frBrandFid = *o.BrandFid
		}
		fBrandFid := frBrandFid
		if fBrandFid != "" {
			if err := r.SetFormParam("brandFid", fBrandFid); err != nil {
				return err
			}
		}
	}

	// path param emailAddress
	if err := r.SetPathParam("emailAddress", o.EmailAddress); err != nil {
		return err
	}

	if o.GroupFid != nil {

		// form param groupFid
		var frGroupFid string
		if o.GroupFid != nil {
			frGroupFid = *o.GroupFid
		}
		fGroupFid := frGroupFid
		if fGroupFid != "" {
			if err := r.SetFormParam("groupFid", fGroupFid); err != nil {
				return err
			}
		}
	}

	if o.UnsubscribeType != nil {

		// form param unsubscribeType
		var frUnsubscribeType string
		if o.UnsubscribeType != nil {
			frUnsubscribeType = *o.UnsubscribeType
		}
		fUnsubscribeType := frUnsubscribeType
		if fUnsubscribeType != "" {
			if err := r.SetFormParam("unsubscribeType", fUnsubscribeType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
