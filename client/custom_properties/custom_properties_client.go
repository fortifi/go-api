// Code generated by go-swagger; DO NOT EDIT.

package custom_properties

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new custom properties API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom properties API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEntitiesEntityFidPropertiesCountersPropertyName(params *DeleteEntitiesEntityFidPropertiesCountersPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesCountersPropertyNameOK, error)

	DeleteEntitiesEntityFidPropertiesFlagsPropertyName(params *DeleteEntitiesEntityFidPropertiesFlagsPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesFlagsPropertyNameOK, error)

	DeleteEntitiesEntityFidPropertiesValuesPropertyName(params *DeleteEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesValuesPropertyNameOK, error)

	GetEntitiesEntityFidPropertiesValuesPropertyName(params *GetEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntitiesEntityFidPropertiesValuesPropertyNameOK, error)

	PutEntitiesEntityFidProperties(params *PutEntitiesEntityFidPropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesOK, error)

	PutEntitiesEntityFidPropertiesCountersPropertyNameDecrement(params *PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementOK, error)

	PutEntitiesEntityFidPropertiesCountersPropertyNameIncrement(params *PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementOK, error)

	PutEntitiesEntityFidPropertiesFlagsPropertyName(params *PutEntitiesEntityFidPropertiesFlagsPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesFlagsPropertyNameOK, error)

	PutEntitiesEntityFidPropertiesValuesPropertyName(params *PutEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesValuesPropertyNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteEntitiesEntityFidPropertiesCountersPropertyName removes a counter from an entity
*/
func (a *Client) DeleteEntitiesEntityFidPropertiesCountersPropertyName(params *DeleteEntitiesEntityFidPropertiesCountersPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesCountersPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntitiesEntityFidPropertiesCountersPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEntitiesEntityFidPropertiesCountersPropertyName",
		Method:             "DELETE",
		PathPattern:        "/entities/{entityFid}/properties/counters/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntitiesEntityFidPropertiesCountersPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEntitiesEntityFidPropertiesCountersPropertyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEntitiesEntityFidPropertiesCountersPropertyNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteEntitiesEntityFidPropertiesFlagsPropertyName removes a flag from an entity
*/
func (a *Client) DeleteEntitiesEntityFidPropertiesFlagsPropertyName(params *DeleteEntitiesEntityFidPropertiesFlagsPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesFlagsPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntitiesEntityFidPropertiesFlagsPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEntitiesEntityFidPropertiesFlagsPropertyName",
		Method:             "DELETE",
		PathPattern:        "/entities/{entityFid}/properties/flags/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntitiesEntityFidPropertiesFlagsPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEntitiesEntityFidPropertiesFlagsPropertyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEntitiesEntityFidPropertiesFlagsPropertyNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteEntitiesEntityFidPropertiesValuesPropertyName removes a value property from an entity
*/
func (a *Client) DeleteEntitiesEntityFidPropertiesValuesPropertyName(params *DeleteEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesValuesPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntitiesEntityFidPropertiesValuesPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEntitiesEntityFidPropertiesValuesPropertyName",
		Method:             "DELETE",
		PathPattern:        "/entities/{entityFid}/properties/values/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntitiesEntityFidPropertiesValuesPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEntitiesEntityFidPropertiesValuesPropertyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEntitiesEntityFidPropertiesValuesPropertyNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetEntitiesEntityFidPropertiesValuesPropertyName gets a property value from an entity
*/
func (a *Client) GetEntitiesEntityFidPropertiesValuesPropertyName(params *GetEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntitiesEntityFidPropertiesValuesPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntitiesEntityFidPropertiesValuesPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEntitiesEntityFidPropertiesValuesPropertyName",
		Method:             "GET",
		PathPattern:        "/entities/{entityFid}/properties/values/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntitiesEntityFidPropertiesValuesPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntitiesEntityFidPropertiesValuesPropertyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEntitiesEntityFidPropertiesValuesPropertyNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutEntitiesEntityFidProperties writes multiple entity properties
*/
func (a *Client) PutEntitiesEntityFidProperties(params *PutEntitiesEntityFidPropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidProperties",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEntitiesEntityFidPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutEntitiesEntityFidPropertiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutEntitiesEntityFidPropertiesCountersPropertyNameDecrement decrements an entity counter
*/
func (a *Client) PutEntitiesEntityFidPropertiesCountersPropertyNameDecrement(params *PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesCountersPropertyNameDecrementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesCountersPropertyNameDecrement",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/counters/{propertyName}/decrement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutEntitiesEntityFidPropertiesCountersPropertyNameIncrement increments an entity counter
*/
func (a *Client) PutEntitiesEntityFidPropertiesCountersPropertyNameIncrement(params *PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesCountersPropertyNameIncrementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesCountersPropertyNameIncrement",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/counters/{propertyName}/increment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutEntitiesEntityFidPropertiesFlagsPropertyName writes an entity flag
*/
func (a *Client) PutEntitiesEntityFidPropertiesFlagsPropertyName(params *PutEntitiesEntityFidPropertiesFlagsPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesFlagsPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesFlagsPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesFlagsPropertyName",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/flags/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesFlagsPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEntitiesEntityFidPropertiesFlagsPropertyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutEntitiesEntityFidPropertiesFlagsPropertyNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutEntitiesEntityFidPropertiesValuesPropertyName writes an entity value property
*/
func (a *Client) PutEntitiesEntityFidPropertiesValuesPropertyName(params *PutEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesValuesPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesValuesPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesValuesPropertyName",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/values/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesValuesPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEntitiesEntityFidPropertiesValuesPropertyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutEntitiesEntityFidPropertiesValuesPropertyNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
