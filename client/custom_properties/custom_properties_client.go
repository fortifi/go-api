// Code generated by go-swagger; DO NOT EDIT.

package custom_properties

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new custom properties API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom properties API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteEntitiesEntityFidPropertiesCountersPropertyName removes a counter from an entity
*/
func (a *Client) DeleteEntitiesEntityFidPropertiesCountersPropertyName(params *DeleteEntitiesEntityFidPropertiesCountersPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesCountersPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntitiesEntityFidPropertiesCountersPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEntitiesEntityFidPropertiesCountersPropertyName",
		Method:             "DELETE",
		PathPattern:        "/entities/{entityFid}/properties/counters/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntitiesEntityFidPropertiesCountersPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEntitiesEntityFidPropertiesCountersPropertyNameOK), nil

}

/*
DeleteEntitiesEntityFidPropertiesFlagsPropertyName removes a flag from an entity
*/
func (a *Client) DeleteEntitiesEntityFidPropertiesFlagsPropertyName(params *DeleteEntitiesEntityFidPropertiesFlagsPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesFlagsPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntitiesEntityFidPropertiesFlagsPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEntitiesEntityFidPropertiesFlagsPropertyName",
		Method:             "DELETE",
		PathPattern:        "/entities/{entityFid}/properties/flags/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntitiesEntityFidPropertiesFlagsPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEntitiesEntityFidPropertiesFlagsPropertyNameOK), nil

}

/*
DeleteEntitiesEntityFidPropertiesValuesPropertyName removes a value property from an entity
*/
func (a *Client) DeleteEntitiesEntityFidPropertiesValuesPropertyName(params *DeleteEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidPropertiesValuesPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntitiesEntityFidPropertiesValuesPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEntitiesEntityFidPropertiesValuesPropertyName",
		Method:             "DELETE",
		PathPattern:        "/entities/{entityFid}/properties/values/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntitiesEntityFidPropertiesValuesPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEntitiesEntityFidPropertiesValuesPropertyNameOK), nil

}

/*
PutEntitiesEntityFidProperties writes multiple entity properties
*/
func (a *Client) PutEntitiesEntityFidProperties(params *PutEntitiesEntityFidPropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidProperties",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEntitiesEntityFidPropertiesOK), nil

}

/*
PutEntitiesEntityFidPropertiesCountersPropertyNameDecrement decrements an entity counter
*/
func (a *Client) PutEntitiesEntityFidPropertiesCountersPropertyNameDecrement(params *PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesCountersPropertyNameDecrementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesCountersPropertyNameDecrement",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/counters/{propertyName}/decrement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEntitiesEntityFidPropertiesCountersPropertyNameDecrementOK), nil

}

/*
PutEntitiesEntityFidPropertiesCountersPropertyNameIncrement increments an entity counter
*/
func (a *Client) PutEntitiesEntityFidPropertiesCountersPropertyNameIncrement(params *PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesCountersPropertyNameIncrementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesCountersPropertyNameIncrement",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/counters/{propertyName}/increment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEntitiesEntityFidPropertiesCountersPropertyNameIncrementOK), nil

}

/*
PutEntitiesEntityFidPropertiesFlagsPropertyName writes an entity flag
*/
func (a *Client) PutEntitiesEntityFidPropertiesFlagsPropertyName(params *PutEntitiesEntityFidPropertiesFlagsPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesFlagsPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesFlagsPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesFlagsPropertyName",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/flags/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesFlagsPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEntitiesEntityFidPropertiesFlagsPropertyNameOK), nil

}

/*
PutEntitiesEntityFidPropertiesValuesPropertyName writes an entity value property
*/
func (a *Client) PutEntitiesEntityFidPropertiesValuesPropertyName(params *PutEntitiesEntityFidPropertiesValuesPropertyNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutEntitiesEntityFidPropertiesValuesPropertyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEntitiesEntityFidPropertiesValuesPropertyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEntitiesEntityFidPropertiesValuesPropertyName",
		Method:             "PUT",
		PathPattern:        "/entities/{entityFid}/properties/values/{propertyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEntitiesEntityFidPropertiesValuesPropertyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEntitiesEntityFidPropertiesValuesPropertyNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
