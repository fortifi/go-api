// Code generated by go-swagger; DO NOT EDIT.

package marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new marketing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for marketing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAdvertisersAdvertiserFidApproved(params *DeleteAdvertisersAdvertiserFidApprovedParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAdvertisersAdvertiserFidApprovedOK, error)

	GetAdvertisers(params *GetAdvertisersParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdvertisersOK, error)

	GetAdvertisersAdvertiserFid(params *GetAdvertisersAdvertiserFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdvertisersAdvertiserFidOK, error)

	GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFid(params *GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidOK, error)

	GetVisitorsVisitorID(params *GetVisitorsVisitorIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVisitorsVisitorIDOK, error)

	GetVisitorsVisitorIDPixels(params *GetVisitorsVisitorIDPixelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVisitorsVisitorIDPixelsOK, error)

	PostAdvertisers(params *PostAdvertisersParams, authInfo runtime.ClientAuthInfoWriter) (*PostAdvertisersOK, error)

	PostAdvertisersAdvertiserFidCampaigns(params *PostAdvertisersAdvertiserFidCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAdvertisersAdvertiserFidCampaignsOK, error)

	PostVisitorsVisitorIDActionsActionKey(params *PostVisitorsVisitorIDActionsActionKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostVisitorsVisitorIDActionsActionKeyOK, error)

	PostVisitorsVisitorIDActionsActionKeyReverse(params *PostVisitorsVisitorIDActionsActionKeyReverseParams, authInfo runtime.ClientAuthInfoWriter) (*PostVisitorsVisitorIDActionsActionKeyReverseOK, error)

	PutAdvertisersAdvertiserFidApproved(params *PutAdvertisersAdvertiserFidApprovedParams, authInfo runtime.ClientAuthInfoWriter) (*PutAdvertisersAdvertiserFidApprovedOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAdvertisersAdvertiserFidApproved removes approved status on an advertiser
*/
func (a *Client) DeleteAdvertisersAdvertiserFidApproved(params *DeleteAdvertisersAdvertiserFidApprovedParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAdvertisersAdvertiserFidApprovedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdvertisersAdvertiserFidApprovedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAdvertisersAdvertiserFidApproved",
		Method:             "DELETE",
		PathPattern:        "/advertisers/{advertiserFid}/approved",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAdvertisersAdvertiserFidApprovedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAdvertisersAdvertiserFidApprovedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAdvertisersAdvertiserFidApprovedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAdvertisers lists advertisers
*/
func (a *Client) GetAdvertisers(params *GetAdvertisersParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdvertisersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdvertisersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAdvertisers",
		Method:             "GET",
		PathPattern:        "/advertisers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdvertisersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdvertisersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdvertisersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAdvertisersAdvertiserFid retrieves an advertiser
*/
func (a *Client) GetAdvertisersAdvertiserFid(params *GetAdvertisersAdvertiserFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdvertisersAdvertiserFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdvertisersAdvertiserFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAdvertisersAdvertiserFid",
		Method:             "GET",
		PathPattern:        "/advertisers/{advertiserFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdvertisersAdvertiserFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdvertisersAdvertiserFidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdvertisersAdvertiserFidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFid retrieves an advertiser campaign
*/
func (a *Client) GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFid(params *GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFid",
		Method:             "GET",
		PathPattern:        "/advertisers/{advertiserFid}/campaigns/{advertiserCampaignFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdvertisersAdvertiserFidCampaignsAdvertiserCampaignFidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetVisitorsVisitorID retrieves information about a visitor

  This call will return information related to how a visitor arrived
*/
func (a *Client) GetVisitorsVisitorID(params *GetVisitorsVisitorIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVisitorsVisitorIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVisitorsVisitorIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVisitorsVisitorID",
		Method:             "GET",
		PathPattern:        "/visitors/{visitorId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVisitorsVisitorIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVisitorsVisitorIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVisitorsVisitorIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetVisitorsVisitorIDPixels retrieves pending pixels for this visitor

  This call will release pixels from the pending queue on read
*/
func (a *Client) GetVisitorsVisitorIDPixels(params *GetVisitorsVisitorIDPixelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVisitorsVisitorIDPixelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVisitorsVisitorIDPixelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVisitorsVisitorIDPixels",
		Method:             "GET",
		PathPattern:        "/visitors/{visitorId}/pixels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVisitorsVisitorIDPixelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVisitorsVisitorIDPixelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVisitorsVisitorIDPixelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostAdvertisers creates a new advertiser
*/
func (a *Client) PostAdvertisers(params *PostAdvertisersParams, authInfo runtime.ClientAuthInfoWriter) (*PostAdvertisersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAdvertisersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAdvertisers",
		Method:             "POST",
		PathPattern:        "/advertisers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAdvertisersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAdvertisersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAdvertisersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostAdvertisersAdvertiserFidCampaigns creates a new advertiser campaign
*/
func (a *Client) PostAdvertisersAdvertiserFidCampaigns(params *PostAdvertisersAdvertiserFidCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAdvertisersAdvertiserFidCampaignsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAdvertisersAdvertiserFidCampaignsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAdvertisersAdvertiserFidCampaigns",
		Method:             "POST",
		PathPattern:        "/advertisers/{advertiserFid}/campaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAdvertisersAdvertiserFidCampaignsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAdvertisersAdvertiserFidCampaignsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAdvertisersAdvertiserFidCampaignsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostVisitorsVisitorIDActionsActionKey tracks an action

  Track an action such as a lead or acquisition

*/
func (a *Client) PostVisitorsVisitorIDActionsActionKey(params *PostVisitorsVisitorIDActionsActionKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostVisitorsVisitorIDActionsActionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVisitorsVisitorIDActionsActionKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVisitorsVisitorIDActionsActionKey",
		Method:             "POST",
		PathPattern:        "/visitors/{visitorId}/actions/{actionKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVisitorsVisitorIDActionsActionKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVisitorsVisitorIDActionsActionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostVisitorsVisitorIDActionsActionKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostVisitorsVisitorIDActionsActionKeyReverse reverses a previously tracked action

  When an action has been reversed, e.g. cancelled, refunded

*/
func (a *Client) PostVisitorsVisitorIDActionsActionKeyReverse(params *PostVisitorsVisitorIDActionsActionKeyReverseParams, authInfo runtime.ClientAuthInfoWriter) (*PostVisitorsVisitorIDActionsActionKeyReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVisitorsVisitorIDActionsActionKeyReverseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVisitorsVisitorIDActionsActionKeyReverse",
		Method:             "POST",
		PathPattern:        "/visitors/{visitorId}/actions/{actionKey}/reverse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVisitorsVisitorIDActionsActionKeyReverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVisitorsVisitorIDActionsActionKeyReverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostVisitorsVisitorIDActionsActionKeyReverseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutAdvertisersAdvertiserFidApproved sets approved status on an advertiser
*/
func (a *Client) PutAdvertisersAdvertiserFidApproved(params *PutAdvertisersAdvertiserFidApprovedParams, authInfo runtime.ClientAuthInfoWriter) (*PutAdvertisersAdvertiserFidApprovedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAdvertisersAdvertiserFidApprovedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAdvertisersAdvertiserFidApproved",
		Method:             "PUT",
		PathPattern:        "/advertisers/{advertiserFid}/approved",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAdvertisersAdvertiserFidApprovedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAdvertisersAdvertiserFidApprovedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutAdvertisersAdvertiserFidApprovedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
