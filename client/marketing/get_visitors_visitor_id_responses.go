// Code generated by go-swagger; DO NOT EDIT.

package marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/fortifi/go-api/models"
)

// GetVisitorsVisitorIDReader is a Reader for the GetVisitorsVisitorID structure.
type GetVisitorsVisitorIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVisitorsVisitorIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVisitorsVisitorIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetVisitorsVisitorIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVisitorsVisitorIDOK creates a GetVisitorsVisitorIDOK with default headers values
func NewGetVisitorsVisitorIDOK() *GetVisitorsVisitorIDOK {
	return &GetVisitorsVisitorIDOK{}
}

/*GetVisitorsVisitorIDOK handles this case with default header values.

Pixels
*/
type GetVisitorsVisitorIDOK struct {
	Payload *GetVisitorsVisitorIDOKBody
}

func (o *GetVisitorsVisitorIDOK) Error() string {
	return fmt.Sprintf("[GET /visitors/{visitorId}][%d] getVisitorsVisitorIdOK  %+v", 200, o.Payload)
}

func (o *GetVisitorsVisitorIDOK) GetPayload() *GetVisitorsVisitorIDOKBody {
	return o.Payload
}

func (o *GetVisitorsVisitorIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetVisitorsVisitorIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVisitorsVisitorIDDefault creates a GetVisitorsVisitorIDDefault with default headers values
func NewGetVisitorsVisitorIDDefault(code int) *GetVisitorsVisitorIDDefault {
	return &GetVisitorsVisitorIDDefault{
		_statusCode: code,
	}
}

/*GetVisitorsVisitorIDDefault handles this case with default header values.

Error
*/
type GetVisitorsVisitorIDDefault struct {
	_statusCode int

	Payload *models.Envelope
}

// Code gets the status code for the get visitors visitor ID default response
func (o *GetVisitorsVisitorIDDefault) Code() int {
	return o._statusCode
}

func (o *GetVisitorsVisitorIDDefault) Error() string {
	return fmt.Sprintf("[GET /visitors/{visitorId}][%d] GetVisitorsVisitorID default  %+v", o._statusCode, o.Payload)
}

func (o *GetVisitorsVisitorIDDefault) GetPayload() *models.Envelope {
	return o.Payload
}

func (o *GetVisitorsVisitorIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Envelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetVisitorsVisitorIDOKBody get visitors visitor ID o k body
swagger:model GetVisitorsVisitorIDOKBody
*/
type GetVisitorsVisitorIDOKBody struct {
	models.Envelope

	// data
	Data *models.VisitorResponse `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetVisitorsVisitorIDOKBody) UnmarshalJSON(raw []byte) error {
	// GetVisitorsVisitorIDOKBodyAO0
	var getVisitorsVisitorIDOKBodyAO0 models.Envelope
	if err := swag.ReadJSON(raw, &getVisitorsVisitorIDOKBodyAO0); err != nil {
		return err
	}
	o.Envelope = getVisitorsVisitorIDOKBodyAO0

	// GetVisitorsVisitorIDOKBodyAO1
	var dataGetVisitorsVisitorIDOKBodyAO1 struct {
		Data *models.VisitorResponse `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetVisitorsVisitorIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetVisitorsVisitorIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetVisitorsVisitorIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getVisitorsVisitorIDOKBodyAO0, err := swag.WriteJSON(o.Envelope)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getVisitorsVisitorIDOKBodyAO0)

	var dataGetVisitorsVisitorIDOKBodyAO1 struct {
		Data *models.VisitorResponse `json:"data,omitempty"`
	}

	dataGetVisitorsVisitorIDOKBodyAO1.Data = o.Data

	jsonDataGetVisitorsVisitorIDOKBodyAO1, errGetVisitorsVisitorIDOKBodyAO1 := swag.WriteJSON(dataGetVisitorsVisitorIDOKBodyAO1)
	if errGetVisitorsVisitorIDOKBodyAO1 != nil {
		return nil, errGetVisitorsVisitorIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetVisitorsVisitorIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get visitors visitor ID o k body
func (o *GetVisitorsVisitorIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Envelope
	if err := o.Envelope.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVisitorsVisitorIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getVisitorsVisitorIdOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetVisitorsVisitorIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVisitorsVisitorIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetVisitorsVisitorIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
