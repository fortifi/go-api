// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	httptransport "github.com/go-openapi/runtime/client"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fortifi/go-api/client/configuration"
	"github.com/fortifi/go-api/client/contacts"
	"github.com/fortifi/go-api/client/custom_properties"
	"github.com/fortifi/go-api/client/customers"
	"github.com/fortifi/go-api/client/entity"
	"github.com/fortifi/go-api/client/licence"
	"github.com/fortifi/go-api/client/marketing"
	"github.com/fortifi/go-api/client/operations"
	"github.com/fortifi/go-api/client/orders"
	"github.com/fortifi/go-api/client/polymers"
	"github.com/fortifi/go-api/client/products"
	"github.com/fortifi/go-api/client/reasons"
	"github.com/fortifi/go-api/client/service_status"
	"github.com/fortifi/go-api/client/support"
)

// Default fortifi HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "api.fortifi.io"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new fortifi HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Fortifi {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new fortifi HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Fortifi {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new fortifi client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Fortifi {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Fortifi)
	cli.Transport = transport
	cli.Configuration = configuration.New(transport, formats)
	cli.Contacts = contacts.New(transport, formats)
	cli.CustomProperties = custom_properties.New(transport, formats)
	cli.Customers = customers.New(transport, formats)
	cli.Entity = entity.New(transport, formats)
	cli.Licence = licence.New(transport, formats)
	cli.Marketing = marketing.New(transport, formats)
	cli.Operations = operations.New(transport, formats)
	cli.Orders = orders.New(transport, formats)
	cli.Polymers = polymers.New(transport, formats)
	cli.Products = products.New(transport, formats)
	cli.Reasons = reasons.New(transport, formats)
	cli.ServiceStatus = service_status.New(transport, formats)
	cli.Support = support.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Fortifi is a client for fortifi
type Fortifi struct {
	Configuration configuration.ClientService

	Contacts contacts.ClientService

	CustomProperties custom_properties.ClientService

	Customers customers.ClientService

	Entity entity.ClientService

	Licence licence.ClientService

	Marketing marketing.ClientService

	Operations operations.ClientService

	Orders orders.ClientService

	Polymers polymers.ClientService

	Products products.ClientService

	Reasons reasons.ClientService

	ServiceStatus service_status.ClientService

	Support support.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Fortifi) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Configuration.SetTransport(transport)
	c.Contacts.SetTransport(transport)
	c.CustomProperties.SetTransport(transport)
	c.Customers.SetTransport(transport)
	c.Entity.SetTransport(transport)
	c.Licence.SetTransport(transport)
	c.Marketing.SetTransport(transport)
	c.Operations.SetTransport(transport)
	c.Orders.SetTransport(transport)
	c.Polymers.SetTransport(transport)
	c.Products.SetTransport(transport)
	c.Reasons.SetTransport(transport)
	c.ServiceStatus.SetTransport(transport)
	c.Support.SetTransport(transport)
}
