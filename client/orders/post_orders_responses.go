// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/fortifi/go-api/models"
)

// PostOrdersReader is a Reader for the PostOrders structure.
type PostOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPostOrdersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostOrdersOK creates a PostOrdersOK with default headers values
func NewPostOrdersOK() *PostOrdersOK {
	return &PostOrdersOK{}
}

/* PostOrdersOK describes a response with status code 200, with default header values.

Order created successfully
*/
type PostOrdersOK struct {
	Payload *PostOrdersOKBody
}

func (o *PostOrdersOK) Error() string {
	return fmt.Sprintf("[POST /orders][%d] postOrdersOK  %+v", 200, o.Payload)
}
func (o *PostOrdersOK) GetPayload() *PostOrdersOKBody {
	return o.Payload
}

func (o *PostOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostOrdersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOrdersDefault creates a PostOrdersDefault with default headers values
func NewPostOrdersDefault(code int) *PostOrdersDefault {
	return &PostOrdersDefault{
		_statusCode: code,
	}
}

/* PostOrdersDefault describes a response with status code -1, with default header values.

Error
*/
type PostOrdersDefault struct {
	_statusCode int

	Payload *models.Envelope
}

// Code gets the status code for the post orders default response
func (o *PostOrdersDefault) Code() int {
	return o._statusCode
}

func (o *PostOrdersDefault) Error() string {
	return fmt.Sprintf("[POST /orders][%d] PostOrders default  %+v", o._statusCode, o.Payload)
}
func (o *PostOrdersDefault) GetPayload() *models.Envelope {
	return o.Payload
}

func (o *PostOrdersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Envelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostOrdersOKBody post orders o k body
swagger:model PostOrdersOKBody
*/
type PostOrdersOKBody struct {
	models.Envelope

	// data
	Data *models.Order `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostOrdersOKBody) UnmarshalJSON(raw []byte) error {
	// PostOrdersOKBodyAO0
	var postOrdersOKBodyAO0 models.Envelope
	if err := swag.ReadJSON(raw, &postOrdersOKBodyAO0); err != nil {
		return err
	}
	o.Envelope = postOrdersOKBodyAO0

	// PostOrdersOKBodyAO1
	var dataPostOrdersOKBodyAO1 struct {
		Data *models.Order `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostOrdersOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostOrdersOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostOrdersOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postOrdersOKBodyAO0, err := swag.WriteJSON(o.Envelope)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postOrdersOKBodyAO0)
	var dataPostOrdersOKBodyAO1 struct {
		Data *models.Order `json:"data,omitempty"`
	}

	dataPostOrdersOKBodyAO1.Data = o.Data

	jsonDataPostOrdersOKBodyAO1, errPostOrdersOKBodyAO1 := swag.WriteJSON(dataPostOrdersOKBodyAO1)
	if errPostOrdersOKBodyAO1 != nil {
		return nil, errPostOrdersOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostOrdersOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post orders o k body
func (o *PostOrdersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Envelope
	if err := o.Envelope.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrdersOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrdersOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post orders o k body based on the context it is used
func (o *PostOrdersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Envelope
	if err := o.Envelope.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrdersOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrdersOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOrdersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrdersOKBody) UnmarshalBinary(b []byte) error {
	var res PostOrdersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
