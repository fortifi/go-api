// Code generated by go-swagger; DO NOT EDIT.

package licence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/fortifi/go-api/models"
)

// GetLicenceCheckReader is a Reader for the GetLicenceCheck structure.
type GetLicenceCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenceCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetLicenceCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetLicenceCheckNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetLicenceCheckDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLicenceCheckOK creates a GetLicenceCheckOK with default headers values
func NewGetLicenceCheckOK() *GetLicenceCheckOK {
	return &GetLicenceCheckOK{}
}

/*GetLicenceCheckOK handles this case with default header values.

Licence Information
*/
type GetLicenceCheckOK struct {
	Payload *models.GetLicenceCheckOKBody
}

func (o *GetLicenceCheckOK) Error() string {
	return fmt.Sprintf("[GET /licence/check][%d] getLicenceCheckOK  %+v", 200, o.Payload)
}

func (o *GetLicenceCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetLicenceCheckOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenceCheckNotFound creates a GetLicenceCheckNotFound with default headers values
func NewGetLicenceCheckNotFound() *GetLicenceCheckNotFound {
	return &GetLicenceCheckNotFound{}
}

/*GetLicenceCheckNotFound handles this case with default header values.

Licence Not Valid
*/
type GetLicenceCheckNotFound struct {
}

func (o *GetLicenceCheckNotFound) Error() string {
	return fmt.Sprintf("[GET /licence/check][%d] getLicenceCheckNotFound ", 404)
}

func (o *GetLicenceCheckNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLicenceCheckDefault creates a GetLicenceCheckDefault with default headers values
func NewGetLicenceCheckDefault(code int) *GetLicenceCheckDefault {
	return &GetLicenceCheckDefault{
		_statusCode: code,
	}
}

/*GetLicenceCheckDefault handles this case with default header values.

Error
*/
type GetLicenceCheckDefault struct {
	_statusCode int

	Payload *models.Envelope
}

// Code gets the status code for the get licence check default response
func (o *GetLicenceCheckDefault) Code() int {
	return o._statusCode
}

func (o *GetLicenceCheckDefault) Error() string {
	return fmt.Sprintf("[GET /licence/check][%d] GetLicenceCheck default  %+v", o._statusCode, o.Payload)
}

func (o *GetLicenceCheckDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Envelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
