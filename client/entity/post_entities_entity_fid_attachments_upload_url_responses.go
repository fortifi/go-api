// Code generated by go-swagger; DO NOT EDIT.

package entity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/fortifi/go-api/models"
)

// PostEntitiesEntityFidAttachmentsUploadURLReader is a Reader for the PostEntitiesEntityFidAttachmentsUploadURL structure.
type PostEntitiesEntityFidAttachmentsUploadURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEntitiesEntityFidAttachmentsUploadURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostEntitiesEntityFidAttachmentsUploadURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPostEntitiesEntityFidAttachmentsUploadURLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostEntitiesEntityFidAttachmentsUploadURLOK creates a PostEntitiesEntityFidAttachmentsUploadURLOK with default headers values
func NewPostEntitiesEntityFidAttachmentsUploadURLOK() *PostEntitiesEntityFidAttachmentsUploadURLOK {
	return &PostEntitiesEntityFidAttachmentsUploadURLOK{}
}

/*PostEntitiesEntityFidAttachmentsUploadURLOK handles this case with default header values.

Attachment upload URL
*/
type PostEntitiesEntityFidAttachmentsUploadURLOK struct {
	Payload *PostEntitiesEntityFidAttachmentsUploadURLOKBody
}

func (o *PostEntitiesEntityFidAttachmentsUploadURLOK) Error() string {
	return fmt.Sprintf("[POST /entities/{entityFid}/attachments/uploadUrl][%d] postEntitiesEntityFidAttachmentsUploadUrlOK  %+v", 200, o.Payload)
}

func (o *PostEntitiesEntityFidAttachmentsUploadURLOK) GetPayload() *PostEntitiesEntityFidAttachmentsUploadURLOKBody {
	return o.Payload
}

func (o *PostEntitiesEntityFidAttachmentsUploadURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostEntitiesEntityFidAttachmentsUploadURLOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEntitiesEntityFidAttachmentsUploadURLDefault creates a PostEntitiesEntityFidAttachmentsUploadURLDefault with default headers values
func NewPostEntitiesEntityFidAttachmentsUploadURLDefault(code int) *PostEntitiesEntityFidAttachmentsUploadURLDefault {
	return &PostEntitiesEntityFidAttachmentsUploadURLDefault{
		_statusCode: code,
	}
}

/*PostEntitiesEntityFidAttachmentsUploadURLDefault handles this case with default header values.

Error
*/
type PostEntitiesEntityFidAttachmentsUploadURLDefault struct {
	_statusCode int

	Payload *models.Envelope
}

// Code gets the status code for the post entities entity fid attachments upload URL default response
func (o *PostEntitiesEntityFidAttachmentsUploadURLDefault) Code() int {
	return o._statusCode
}

func (o *PostEntitiesEntityFidAttachmentsUploadURLDefault) Error() string {
	return fmt.Sprintf("[POST /entities/{entityFid}/attachments/uploadUrl][%d] PostEntitiesEntityFidAttachmentsUploadURL default  %+v", o._statusCode, o.Payload)
}

func (o *PostEntitiesEntityFidAttachmentsUploadURLDefault) GetPayload() *models.Envelope {
	return o.Payload
}

func (o *PostEntitiesEntityFidAttachmentsUploadURLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Envelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostEntitiesEntityFidAttachmentsUploadURLOKBody post entities entity fid attachments upload URL o k body
swagger:model PostEntitiesEntityFidAttachmentsUploadURLOKBody
*/
type PostEntitiesEntityFidAttachmentsUploadURLOKBody struct {
	models.Envelope

	// data
	Data *models.AttachmentURL `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostEntitiesEntityFidAttachmentsUploadURLOKBody) UnmarshalJSON(raw []byte) error {
	// PostEntitiesEntityFidAttachmentsUploadURLOKBodyAO0
	var postEntitiesEntityFidAttachmentsUploadURLOKBodyAO0 models.Envelope
	if err := swag.ReadJSON(raw, &postEntitiesEntityFidAttachmentsUploadURLOKBodyAO0); err != nil {
		return err
	}
	o.Envelope = postEntitiesEntityFidAttachmentsUploadURLOKBodyAO0

	// PostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1
	var dataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1 struct {
		Data *models.AttachmentURL `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostEntitiesEntityFidAttachmentsUploadURLOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postEntitiesEntityFidAttachmentsUploadURLOKBodyAO0, err := swag.WriteJSON(o.Envelope)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postEntitiesEntityFidAttachmentsUploadURLOKBodyAO0)

	var dataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1 struct {
		Data *models.AttachmentURL `json:"data,omitempty"`
	}

	dataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1.Data = o.Data

	jsonDataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1, errPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1 := swag.WriteJSON(dataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1)
	if errPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1 != nil {
		return nil, errPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostEntitiesEntityFidAttachmentsUploadURLOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post entities entity fid attachments upload URL o k body
func (o *PostEntitiesEntityFidAttachmentsUploadURLOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Envelope
	if err := o.Envelope.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostEntitiesEntityFidAttachmentsUploadURLOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postEntitiesEntityFidAttachmentsUploadUrlOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostEntitiesEntityFidAttachmentsUploadURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEntitiesEntityFidAttachmentsUploadURLOKBody) UnmarshalBinary(b []byte) error {
	var res PostEntitiesEntityFidAttachmentsUploadURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
