// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEntitiesEntityFidConfigSectionName(params *DeleteEntitiesEntityFidConfigSectionNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidConfigSectionNameOK, error)

	GetEntitiesEntityFidConfigSectionName(params *GetEntitiesEntityFidConfigSectionNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntitiesEntityFidConfigSectionNameOK, error)

	GetEntitiesEntityFidConfigSectionNameItemsItemName(params *GetEntitiesEntityFidConfigSectionNameItemsItemNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntitiesEntityFidConfigSectionNameItemsItemNameOK, error)

	PostEntitiesEntityFidConfigSectionName(params *PostEntitiesEntityFidConfigSectionNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostEntitiesEntityFidConfigSectionNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteEntitiesEntityFidConfigSectionName removes a config section or property from an entity
*/
func (a *Client) DeleteEntitiesEntityFidConfigSectionName(params *DeleteEntitiesEntityFidConfigSectionNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEntitiesEntityFidConfigSectionNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntitiesEntityFidConfigSectionNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEntitiesEntityFidConfigSectionName",
		Method:             "DELETE",
		PathPattern:        "/entities/{entityFid}/config/{sectionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntitiesEntityFidConfigSectionNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEntitiesEntityFidConfigSectionNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEntitiesEntityFidConfigSectionNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetEntitiesEntityFidConfigSectionName retrieves a config section
*/
func (a *Client) GetEntitiesEntityFidConfigSectionName(params *GetEntitiesEntityFidConfigSectionNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntitiesEntityFidConfigSectionNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntitiesEntityFidConfigSectionNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEntitiesEntityFidConfigSectionName",
		Method:             "GET",
		PathPattern:        "/entities/{entityFid}/config/{sectionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntitiesEntityFidConfigSectionNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntitiesEntityFidConfigSectionNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEntitiesEntityFidConfigSectionNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetEntitiesEntityFidConfigSectionNameItemsItemName retrieves a config item
*/
func (a *Client) GetEntitiesEntityFidConfigSectionNameItemsItemName(params *GetEntitiesEntityFidConfigSectionNameItemsItemNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntitiesEntityFidConfigSectionNameItemsItemNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntitiesEntityFidConfigSectionNameItemsItemNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEntitiesEntityFidConfigSectionNameItemsItemName",
		Method:             "GET",
		PathPattern:        "/entities/{entityFid}/config/{sectionName}/items/{itemName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntitiesEntityFidConfigSectionNameItemsItemNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntitiesEntityFidConfigSectionNameItemsItemNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEntitiesEntityFidConfigSectionNameItemsItemNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostEntitiesEntityFidConfigSectionName writes a config item
*/
func (a *Client) PostEntitiesEntityFidConfigSectionName(params *PostEntitiesEntityFidConfigSectionNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostEntitiesEntityFidConfigSectionNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEntitiesEntityFidConfigSectionNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEntitiesEntityFidConfigSectionName",
		Method:             "POST",
		PathPattern:        "/entities/{entityFid}/config/{sectionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEntitiesEntityFidConfigSectionNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEntitiesEntityFidConfigSectionNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostEntitiesEntityFidConfigSectionNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
