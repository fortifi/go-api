// Code generated by go-swagger; DO NOT EDIT.

package finance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new finance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for finance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetFinancePayments(params *GetFinancePaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFinancePaymentsOK, error)

	GetPublishersPublisherFidFinanceCostImportCostImportFid(params *GetPublishersPublisherFidFinanceCostImportCostImportFidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPublishersPublisherFidFinanceCostImportCostImportFidOK, error)

	PostPublishersPublisherFidFinanceCostImport(params *PostPublishersPublisherFidFinanceCostImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPublishersPublisherFidFinanceCostImportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetFinancePayments performs a payment search
*/
func (a *Client) GetFinancePayments(params *GetFinancePaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFinancePaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFinancePaymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFinancePayments",
		Method:             "GET",
		PathPattern:        "/finance/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFinancePaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFinancePaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFinancePaymentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPublishersPublisherFidFinanceCostImportCostImportFid retrieves the status of cost import
*/
func (a *Client) GetPublishersPublisherFidFinanceCostImportCostImportFid(params *GetPublishersPublisherFidFinanceCostImportCostImportFidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPublishersPublisherFidFinanceCostImportCostImportFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublishersPublisherFidFinanceCostImportCostImportFidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPublishersPublisherFidFinanceCostImportCostImportFid",
		Method:             "GET",
		PathPattern:        "/publishers/{publisherFid}/finance/costImport/{costImportFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPublishersPublisherFidFinanceCostImportCostImportFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublishersPublisherFidFinanceCostImportCostImportFidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPublishersPublisherFidFinanceCostImportCostImportFidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostPublishersPublisherFidFinanceCostImport imports cost data
*/
func (a *Client) PostPublishersPublisherFidFinanceCostImport(params *PostPublishersPublisherFidFinanceCostImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPublishersPublisherFidFinanceCostImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublishersPublisherFidFinanceCostImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPublishersPublisherFidFinanceCostImport",
		Method:             "POST",
		PathPattern:        "/publishers/{publisherFid}/finance/costImport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPublishersPublisherFidFinanceCostImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPublishersPublisherFidFinanceCostImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostPublishersPublisherFidFinanceCostImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
