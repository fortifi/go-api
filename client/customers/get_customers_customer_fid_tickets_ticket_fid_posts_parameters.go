// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCustomersCustomerFidTicketsTicketFidPostsParams creates a new GetCustomersCustomerFidTicketsTicketFidPostsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCustomersCustomerFidTicketsTicketFidPostsParams() *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	return &GetCustomersCustomerFidTicketsTicketFidPostsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCustomersCustomerFidTicketsTicketFidPostsParamsWithTimeout creates a new GetCustomersCustomerFidTicketsTicketFidPostsParams object
// with the ability to set a timeout on a request.
func NewGetCustomersCustomerFidTicketsTicketFidPostsParamsWithTimeout(timeout time.Duration) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	return &GetCustomersCustomerFidTicketsTicketFidPostsParams{
		timeout: timeout,
	}
}

// NewGetCustomersCustomerFidTicketsTicketFidPostsParamsWithContext creates a new GetCustomersCustomerFidTicketsTicketFidPostsParams object
// with the ability to set a context for a request.
func NewGetCustomersCustomerFidTicketsTicketFidPostsParamsWithContext(ctx context.Context) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	return &GetCustomersCustomerFidTicketsTicketFidPostsParams{
		Context: ctx,
	}
}

// NewGetCustomersCustomerFidTicketsTicketFidPostsParamsWithHTTPClient creates a new GetCustomersCustomerFidTicketsTicketFidPostsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCustomersCustomerFidTicketsTicketFidPostsParamsWithHTTPClient(client *http.Client) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	return &GetCustomersCustomerFidTicketsTicketFidPostsParams{
		HTTPClient: client,
	}
}

/*
GetCustomersCustomerFidTicketsTicketFidPostsParams contains all the parameters to send to the API endpoint

	for the get customers customer fid tickets ticket fid posts operation.

	Typically these are written to a http.Request.
*/
type GetCustomersCustomerFidTicketsTicketFidPostsParams struct {

	/* BeforeTimestamp.

	   Show posts before timestamp

	   Format: int64
	*/
	BeforeTimestamp *int64

	/* CustomerFid.

	   Customer FID to use
	*/
	CustomerFid string

	/* IncludeHTML.

	   Respond with the html body as a part of the response
	*/
	IncludeHTML *bool

	/* Limit.

	   Maximum number of records per page (default: 20, max: 100)
	*/
	Limit *int64

	/* TicketFid.

	   Ticket FID to use
	*/
	TicketFid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get customers customer fid tickets ticket fid posts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithDefaults() *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get customers customer fid tickets ticket fid posts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithTimeout(timeout time.Duration) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithContext(ctx context.Context) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithHTTPClient(client *http.Client) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBeforeTimestamp adds the beforeTimestamp to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithBeforeTimestamp(beforeTimestamp *int64) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetBeforeTimestamp(beforeTimestamp)
	return o
}

// SetBeforeTimestamp adds the beforeTimestamp to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetBeforeTimestamp(beforeTimestamp *int64) {
	o.BeforeTimestamp = beforeTimestamp
}

// WithCustomerFid adds the customerFid to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithCustomerFid(customerFid string) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetCustomerFid(customerFid)
	return o
}

// SetCustomerFid adds the customerFid to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetCustomerFid(customerFid string) {
	o.CustomerFid = customerFid
}

// WithIncludeHTML adds the includeHTML to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithIncludeHTML(includeHTML *bool) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetIncludeHTML(includeHTML)
	return o
}

// SetIncludeHTML adds the includeHtml to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetIncludeHTML(includeHTML *bool) {
	o.IncludeHTML = includeHTML
}

// WithLimit adds the limit to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithLimit(limit *int64) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithTicketFid adds the ticketFid to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WithTicketFid(ticketFid string) *GetCustomersCustomerFidTicketsTicketFidPostsParams {
	o.SetTicketFid(ticketFid)
	return o
}

// SetTicketFid adds the ticketFid to the get customers customer fid tickets ticket fid posts params
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) SetTicketFid(ticketFid string) {
	o.TicketFid = ticketFid
}

// WriteToRequest writes these params to a swagger request
func (o *GetCustomersCustomerFidTicketsTicketFidPostsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BeforeTimestamp != nil {

		// query param beforeTimestamp
		var qrBeforeTimestamp int64

		if o.BeforeTimestamp != nil {
			qrBeforeTimestamp = *o.BeforeTimestamp
		}
		qBeforeTimestamp := swag.FormatInt64(qrBeforeTimestamp)
		if qBeforeTimestamp != "" {

			if err := r.SetQueryParam("beforeTimestamp", qBeforeTimestamp); err != nil {
				return err
			}
		}
	}

	// path param customerFid
	if err := r.SetPathParam("customerFid", o.CustomerFid); err != nil {
		return err
	}

	if o.IncludeHTML != nil {

		// query param includeHtml
		var qrIncludeHTML bool

		if o.IncludeHTML != nil {
			qrIncludeHTML = *o.IncludeHTML
		}
		qIncludeHTML := swag.FormatBool(qrIncludeHTML)
		if qIncludeHTML != "" {

			if err := r.SetQueryParam("includeHtml", qIncludeHTML); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param ticketFid
	if err := r.SetPathParam("ticketFid", o.TicketFid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
