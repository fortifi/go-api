// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new customers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCustomersCustomerFid archives a customer
*/
func (a *Client) DeleteCustomersCustomerFid(params *DeleteCustomersCustomerFidParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomersCustomerFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomersCustomerFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCustomersCustomerFid",
		Method:             "DELETE",
		PathPattern:        "/customers/{customerFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomersCustomerFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomersCustomerFidOK), nil

}

/*
DeleteCustomersCustomerFidLoyal removes customer loyalty flag
*/
func (a *Client) DeleteCustomersCustomerFidLoyal(params *DeleteCustomersCustomerFidLoyalParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomersCustomerFidLoyalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomersCustomerFidLoyalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCustomersCustomerFidLoyal",
		Method:             "DELETE",
		PathPattern:        "/customers/{customerFid}/loyal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomersCustomerFidLoyalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomersCustomerFidLoyalOK), nil

}

/*
DeleteCustomersCustomerFidVip removes customer v IP status
*/
func (a *Client) DeleteCustomersCustomerFidVip(params *DeleteCustomersCustomerFidVipParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomersCustomerFidVipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomersCustomerFidVipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCustomersCustomerFidVip",
		Method:             "DELETE",
		PathPattern:        "/customers/{customerFid}/vip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomersCustomerFidVipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomersCustomerFidVipOK), nil

}

/*
GetCustomersCustomerFid retrieves a customer
*/
func (a *Client) GetCustomersCustomerFid(params *GetCustomersCustomerFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersCustomerFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersCustomerFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersCustomerFid",
		Method:             "GET",
		PathPattern:        "/customers/{customerFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersCustomerFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersCustomerFidOK), nil

}

/*
GetCustomersCustomerFidAddresses lists customers addresses
*/
func (a *Client) GetCustomersCustomerFidAddresses(params *GetCustomersCustomerFidAddressesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersCustomerFidAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersCustomerFidAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersCustomerFidAddresses",
		Method:             "GET",
		PathPattern:        "/customers/{customerFid}/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersCustomerFidAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersCustomerFidAddressesOK), nil

}

/*
GetCustomersCustomerFidInvoices lists of invoice summaries for given customer
*/
func (a *Client) GetCustomersCustomerFidInvoices(params *GetCustomersCustomerFidInvoicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersCustomerFidInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersCustomerFidInvoicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersCustomerFidInvoices",
		Method:             "GET",
		PathPattern:        "/customers/{customerFid}/invoices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersCustomerFidInvoicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersCustomerFidInvoicesOK), nil

}

/*
GetCustomersCustomerFidInvoicesInvoiceFid retreives a specific itemised invoice
*/
func (a *Client) GetCustomersCustomerFidInvoicesInvoiceFid(params *GetCustomersCustomerFidInvoicesInvoiceFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersCustomerFidInvoicesInvoiceFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersCustomerFidInvoicesInvoiceFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersCustomerFidInvoicesInvoiceFid",
		Method:             "GET",
		PathPattern:        "/customers/{customerFid}/invoices/{invoiceFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersCustomerFidInvoicesInvoiceFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersCustomerFidInvoicesInvoiceFidOK), nil

}

/*
GetCustomersCustomerFidPaymentsPaymentFid retrieves a payment
*/
func (a *Client) GetCustomersCustomerFidPaymentsPaymentFid(params *GetCustomersCustomerFidPaymentsPaymentFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersCustomerFidPaymentsPaymentFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersCustomerFidPaymentsPaymentFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersCustomerFidPaymentsPaymentFid",
		Method:             "GET",
		PathPattern:        "/customers/{customerFid}/payments/{paymentFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersCustomerFidPaymentsPaymentFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersCustomerFidPaymentsPaymentFidOK), nil

}

/*
GetCustomersCustomerFidSubscriptions lists of subscription summaries for given customer
*/
func (a *Client) GetCustomersCustomerFidSubscriptions(params *GetCustomersCustomerFidSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersCustomerFidSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersCustomerFidSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersCustomerFidSubscriptions",
		Method:             "GET",
		PathPattern:        "/customers/{customerFid}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersCustomerFidSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersCustomerFidSubscriptionsOK), nil

}

/*
GetCustomersCustomerFidSubscriptionsSubscriptionFid retreives a specific subscription
*/
func (a *Client) GetCustomersCustomerFidSubscriptionsSubscriptionFid(params *GetCustomersCustomerFidSubscriptionsSubscriptionFidParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersCustomerFidSubscriptionsSubscriptionFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersCustomerFidSubscriptionsSubscriptionFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersCustomerFidSubscriptionsSubscriptionFid",
		Method:             "GET",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersCustomerFidSubscriptionsSubscriptionFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersCustomerFidSubscriptionsSubscriptionFidOK), nil

}

/*
GetCustomersFindByReference finds a customer by your reference
*/
func (a *Client) GetCustomersFindByReference(params *GetCustomersFindByReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersFindByReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersFindByReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomersFindByReference",
		Method:             "GET",
		PathPattern:        "/customers/findByReference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomersFindByReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomersFindByReferenceOK), nil

}

/*
PostCustomers creates a new customer
*/
func (a *Client) PostCustomers(params *PostCustomersParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCustomers",
		Method:             "POST",
		PathPattern:        "/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCustomersOK), nil

}

/*
PostCustomersCustomerFidAnonymize anonymizes customer data

Anonymize customer data

*/
func (a *Client) PostCustomersCustomerFidAnonymize(params *PostCustomersCustomerFidAnonymizeParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomersCustomerFidAnonymizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomersCustomerFidAnonymizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCustomersCustomerFidAnonymize",
		Method:             "POST",
		PathPattern:        "/customers/{customerFid}/anonymize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCustomersCustomerFidAnonymizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCustomersCustomerFidAnonymizeOK), nil

}

/*
PostCustomersCustomerFidNote saves a note against a customer
*/
func (a *Client) PostCustomersCustomerFidNote(params *PostCustomersCustomerFidNoteParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomersCustomerFidNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomersCustomerFidNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCustomersCustomerFidNote",
		Method:             "POST",
		PathPattern:        "/customers/{customerFid}/note",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCustomersCustomerFidNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCustomersCustomerFidNoteOK), nil

}

/*
PostCustomersCustomerFidPaymentsPaymentFidChargeback initiates a chargeback on a payment
*/
func (a *Client) PostCustomersCustomerFidPaymentsPaymentFidChargeback(params *PostCustomersCustomerFidPaymentsPaymentFidChargebackParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomersCustomerFidPaymentsPaymentFidChargebackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomersCustomerFidPaymentsPaymentFidChargebackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCustomersCustomerFidPaymentsPaymentFidChargeback",
		Method:             "POST",
		PathPattern:        "/customers/{customerFid}/payments/{paymentFid}/chargeback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCustomersCustomerFidPaymentsPaymentFidChargebackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCustomersCustomerFidPaymentsPaymentFidChargebackOK), nil

}

/*
PostCustomersCustomerFidSar subjects access request

Initiate a Subject Access Request.  A URL will be sent via a webhook (CustomerWHE::SUBJECT_ACCESS_REQUEST), once the archive is ready for download

*/
func (a *Client) PostCustomersCustomerFidSar(params *PostCustomersCustomerFidSarParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomersCustomerFidSarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomersCustomerFidSarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCustomersCustomerFidSar",
		Method:             "POST",
		PathPattern:        "/customers/{customerFid}/sar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCustomersCustomerFidSarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCustomersCustomerFidSarOK), nil

}

/*
PutCustomersCustomerFid updates a customer
*/
func (a *Client) PutCustomersCustomerFid(params *PutCustomersCustomerFidParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFid",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidOK), nil

}

/*
PutCustomersCustomerFidAccountStatus updates a customers status
*/
func (a *Client) PutCustomersCustomerFidAccountStatus(params *PutCustomersCustomerFidAccountStatusParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidAccountStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidAccountStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidAccountStatus",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/accountStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidAccountStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidAccountStatusOK), nil

}

/*
PutCustomersCustomerFidAccountType updates a customers status
*/
func (a *Client) PutCustomersCustomerFidAccountType(params *PutCustomersCustomerFidAccountTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidAccountTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidAccountTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidAccountType",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/accountType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidAccountTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidAccountTypeOK), nil

}

/*
PutCustomersCustomerFidChargeback marks customer as charged back this action cannot be undone
*/
func (a *Client) PutCustomersCustomerFidChargeback(params *PutCustomersCustomerFidChargebackParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidChargebackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidChargebackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidChargeback",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/chargeback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidChargebackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidChargebackOK), nil

}

/*
PutCustomersCustomerFidChargebacksChargebackFid actions a chargeback
*/
func (a *Client) PutCustomersCustomerFidChargebacksChargebackFid(params *PutCustomersCustomerFidChargebacksChargebackFidParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidChargebacksChargebackFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidChargebacksChargebackFidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidChargebacksChargebackFid",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/chargebacks/{chargebackFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidChargebacksChargebackFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidChargebacksChargebackFidOK), nil

}

/*
PutCustomersCustomerFidCurrency sets customer currency
*/
func (a *Client) PutCustomersCustomerFidCurrency(params *PutCustomersCustomerFidCurrencyParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidCurrency",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidCurrencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidCurrencyOK), nil

}

/*
PutCustomersCustomerFidFraud marks customer as fraudulent this action cannot be undone
*/
func (a *Client) PutCustomersCustomerFidFraud(params *PutCustomersCustomerFidFraudParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidFraudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidFraudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidFraud",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/fraud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidFraudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidFraudOK), nil

}

/*
PutCustomersCustomerFidInvoicesInvoiceFidRetry retries payment of invoice
*/
func (a *Client) PutCustomersCustomerFidInvoicesInvoiceFidRetry(params *PutCustomersCustomerFidInvoicesInvoiceFidRetryParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidInvoicesInvoiceFidRetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidInvoicesInvoiceFidRetryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidInvoicesInvoiceFidRetry",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/invoices/{invoiceFid}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidInvoicesInvoiceFidRetryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidInvoicesInvoiceFidRetryOK), nil

}

/*
PutCustomersCustomerFidInvoicesRetry retries payment of all customer invoices which are in invoice
*/
func (a *Client) PutCustomersCustomerFidInvoicesRetry(params *PutCustomersCustomerFidInvoicesRetryParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidInvoicesRetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidInvoicesRetryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidInvoicesRetry",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/invoices/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidInvoicesRetryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidInvoicesRetryOK), nil

}

/*
PutCustomersCustomerFidLinkVisitor links visitor to customer record
*/
func (a *Client) PutCustomersCustomerFidLinkVisitor(params *PutCustomersCustomerFidLinkVisitorParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidLinkVisitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidLinkVisitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidLinkVisitor",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/linkVisitor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidLinkVisitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidLinkVisitorOK), nil

}

/*
PutCustomersCustomerFidLocation updates a customers location
*/
func (a *Client) PutCustomersCustomerFidLocation(params *PutCustomersCustomerFidLocationParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidLocation",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/location",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidLocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidLocationOK), nil

}

/*
PutCustomersCustomerFidLoyal sets customer loyalty flag
*/
func (a *Client) PutCustomersCustomerFidLoyal(params *PutCustomersCustomerFidLoyalParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidLoyalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidLoyalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidLoyal",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/loyal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidLoyalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidLoyalOK), nil

}

/*
PutCustomersCustomerFidPurchased marks customer as purchased this action cannot be undone
*/
func (a *Client) PutCustomersCustomerFidPurchased(params *PutCustomersCustomerFidPurchasedParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidPurchasedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidPurchasedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidPurchased",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/purchased",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidPurchasedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidPurchasedOK), nil

}

/*
PutCustomersCustomerFidQualified marks customer as qualified this action cannot be undone
*/
func (a *Client) PutCustomersCustomerFidQualified(params *PutCustomersCustomerFidQualifiedParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidQualifiedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidQualifiedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidQualified",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/qualified",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidQualifiedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidQualifiedOK), nil

}

/*
PutCustomersCustomerFidSubscriptionType updates a customers status
*/
func (a *Client) PutCustomersCustomerFidSubscriptionType(params *PutCustomersCustomerFidSubscriptionTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionType",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptionType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionTypeOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOffer applies an offer to a subscription
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOffer(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOfferParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOfferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOfferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOffer",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/applyOffer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOfferReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidApplyOfferOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefund calculates the result of a potential refund on a subscription
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefund(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefundParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefund",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/calculateRefund",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidCalculateRefundOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidCancel cancels a subscripion returns subscription f ID
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidCancel(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidCancel",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidCancelOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoCharge disables auto charge on specific subscription
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoCharge(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoChargeParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoChargeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoChargeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoCharge",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/disableAutoCharge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoChargeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidDisableAutoChargeOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoCharge enables auto charge on specific subscription
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoCharge(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoChargeParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoChargeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoChargeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoCharge",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/enableAutoCharge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoChargeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidEnableAutoChargeOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidModify modifies an existing subscription with a new price returns new open order to be completed
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidModify(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidModifyParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidModifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidModify",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/modify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidModifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidModifyOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenew pres renew an existing subscription with a different price returns new open order to be completed
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenew(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenewParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenew",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/preRenew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidPreRenewOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewal res enable renewals on a subscription
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewal(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewalParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewal",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/reEnableRenewal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidReEnableRenewalOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscription sets parent subscription on a subscription
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscription(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscription",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/setParentSubscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidSetParentSubscriptionOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccount sets payment account for subscription if changing a payment method from an automatic payment method such as pay pal recurring payments any other subscriptions paid with the same agreement will be set to default payment method and the agreement will be cancelled
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccount(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccount",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/setPaymentAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidSetPaymentAccountOK), nil

}

/*
PutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPrice modifies an existing subscription with a new price which will be used for the next renewal
*/
func (a *Client) PutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPrice(params *PutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPriceParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPrice",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/subscriptions/{subscriptionFid}/updateRenewalPrice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidSubscriptionsSubscriptionFidUpdateRenewalPriceOK), nil

}

/*
PutCustomersCustomerFidVip sets customer as v IP
*/
func (a *Client) PutCustomersCustomerFidVip(params *PutCustomersCustomerFidVipParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomersCustomerFidVipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomersCustomerFidVipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomersCustomerFidVip",
		Method:             "PUT",
		PathPattern:        "/customers/{customerFid}/vip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCustomersCustomerFidVipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomersCustomerFidVipOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
