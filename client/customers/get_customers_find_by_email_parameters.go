// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCustomersFindByEmailParams creates a new GetCustomersFindByEmailParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCustomersFindByEmailParams() *GetCustomersFindByEmailParams {
	return &GetCustomersFindByEmailParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCustomersFindByEmailParamsWithTimeout creates a new GetCustomersFindByEmailParams object
// with the ability to set a timeout on a request.
func NewGetCustomersFindByEmailParamsWithTimeout(timeout time.Duration) *GetCustomersFindByEmailParams {
	return &GetCustomersFindByEmailParams{
		timeout: timeout,
	}
}

// NewGetCustomersFindByEmailParamsWithContext creates a new GetCustomersFindByEmailParams object
// with the ability to set a context for a request.
func NewGetCustomersFindByEmailParamsWithContext(ctx context.Context) *GetCustomersFindByEmailParams {
	return &GetCustomersFindByEmailParams{
		Context: ctx,
	}
}

// NewGetCustomersFindByEmailParamsWithHTTPClient creates a new GetCustomersFindByEmailParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCustomersFindByEmailParamsWithHTTPClient(client *http.Client) *GetCustomersFindByEmailParams {
	return &GetCustomersFindByEmailParams{
		HTTPClient: client,
	}
}

/*
GetCustomersFindByEmailParams contains all the parameters to send to the API endpoint

	for the get customers find by email operation.

	Typically these are written to a http.Request.
*/
type GetCustomersFindByEmailParams struct {

	/* BrandFid.

	   Brand Fid to search for
	*/
	BrandFid *string

	/* Email.

	   Email address for the customer
	*/
	Email *string

	// RetrieveBillingData.
	RetrieveBillingData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get customers find by email params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCustomersFindByEmailParams) WithDefaults() *GetCustomersFindByEmailParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get customers find by email params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCustomersFindByEmailParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get customers find by email params
func (o *GetCustomersFindByEmailParams) WithTimeout(timeout time.Duration) *GetCustomersFindByEmailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get customers find by email params
func (o *GetCustomersFindByEmailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get customers find by email params
func (o *GetCustomersFindByEmailParams) WithContext(ctx context.Context) *GetCustomersFindByEmailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get customers find by email params
func (o *GetCustomersFindByEmailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get customers find by email params
func (o *GetCustomersFindByEmailParams) WithHTTPClient(client *http.Client) *GetCustomersFindByEmailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get customers find by email params
func (o *GetCustomersFindByEmailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBrandFid adds the brandFid to the get customers find by email params
func (o *GetCustomersFindByEmailParams) WithBrandFid(brandFid *string) *GetCustomersFindByEmailParams {
	o.SetBrandFid(brandFid)
	return o
}

// SetBrandFid adds the brandFid to the get customers find by email params
func (o *GetCustomersFindByEmailParams) SetBrandFid(brandFid *string) {
	o.BrandFid = brandFid
}

// WithEmail adds the email to the get customers find by email params
func (o *GetCustomersFindByEmailParams) WithEmail(email *string) *GetCustomersFindByEmailParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get customers find by email params
func (o *GetCustomersFindByEmailParams) SetEmail(email *string) {
	o.Email = email
}

// WithRetrieveBillingData adds the retrieveBillingData to the get customers find by email params
func (o *GetCustomersFindByEmailParams) WithRetrieveBillingData(retrieveBillingData *bool) *GetCustomersFindByEmailParams {
	o.SetRetrieveBillingData(retrieveBillingData)
	return o
}

// SetRetrieveBillingData adds the retrieveBillingData to the get customers find by email params
func (o *GetCustomersFindByEmailParams) SetRetrieveBillingData(retrieveBillingData *bool) {
	o.RetrieveBillingData = retrieveBillingData
}

// WriteToRequest writes these params to a swagger request
func (o *GetCustomersFindByEmailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BrandFid != nil {

		// query param brandFid
		var qrBrandFid string

		if o.BrandFid != nil {
			qrBrandFid = *o.BrandFid
		}
		qBrandFid := qrBrandFid
		if qBrandFid != "" {

			if err := r.SetQueryParam("brandFid", qBrandFid); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.RetrieveBillingData != nil {

		// query param retrieveBillingData
		var qrRetrieveBillingData bool

		if o.RetrieveBillingData != nil {
			qrRetrieveBillingData = *o.RetrieveBillingData
		}
		qRetrieveBillingData := swag.FormatBool(qrRetrieveBillingData)
		if qRetrieveBillingData != "" {

			if err := r.SetQueryParam("retrieveBillingData", qRetrieveBillingData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
