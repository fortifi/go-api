// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostCustomersCustomerFidNoteParams creates a new PostCustomersCustomerFidNoteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostCustomersCustomerFidNoteParams() *PostCustomersCustomerFidNoteParams {
	return &PostCustomersCustomerFidNoteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostCustomersCustomerFidNoteParamsWithTimeout creates a new PostCustomersCustomerFidNoteParams object
// with the ability to set a timeout on a request.
func NewPostCustomersCustomerFidNoteParamsWithTimeout(timeout time.Duration) *PostCustomersCustomerFidNoteParams {
	return &PostCustomersCustomerFidNoteParams{
		timeout: timeout,
	}
}

// NewPostCustomersCustomerFidNoteParamsWithContext creates a new PostCustomersCustomerFidNoteParams object
// with the ability to set a context for a request.
func NewPostCustomersCustomerFidNoteParamsWithContext(ctx context.Context) *PostCustomersCustomerFidNoteParams {
	return &PostCustomersCustomerFidNoteParams{
		Context: ctx,
	}
}

// NewPostCustomersCustomerFidNoteParamsWithHTTPClient creates a new PostCustomersCustomerFidNoteParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostCustomersCustomerFidNoteParamsWithHTTPClient(client *http.Client) *PostCustomersCustomerFidNoteParams {
	return &PostCustomersCustomerFidNoteParams{
		HTTPClient: client,
	}
}

/*
PostCustomersCustomerFidNoteParams contains all the parameters to send to the API endpoint

	for the post customers customer fid note operation.

	Typically these are written to a http.Request.
*/
type PostCustomersCustomerFidNoteParams struct {

	/* Colour.

	   Colour of the new ticket
	*/
	Colour *string

	/* CustomerFid.

	   Customer FID to use
	*/
	CustomerFid string

	/* Note.

	   Text content of note
	*/
	Note string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post customers customer fid note params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostCustomersCustomerFidNoteParams) WithDefaults() *PostCustomersCustomerFidNoteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post customers customer fid note params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostCustomersCustomerFidNoteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) WithTimeout(timeout time.Duration) *PostCustomersCustomerFidNoteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) WithContext(ctx context.Context) *PostCustomersCustomerFidNoteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) WithHTTPClient(client *http.Client) *PostCustomersCustomerFidNoteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithColour adds the colour to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) WithColour(colour *string) *PostCustomersCustomerFidNoteParams {
	o.SetColour(colour)
	return o
}

// SetColour adds the colour to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) SetColour(colour *string) {
	o.Colour = colour
}

// WithCustomerFid adds the customerFid to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) WithCustomerFid(customerFid string) *PostCustomersCustomerFidNoteParams {
	o.SetCustomerFid(customerFid)
	return o
}

// SetCustomerFid adds the customerFid to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) SetCustomerFid(customerFid string) {
	o.CustomerFid = customerFid
}

// WithNote adds the note to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) WithNote(note string) *PostCustomersCustomerFidNoteParams {
	o.SetNote(note)
	return o
}

// SetNote adds the note to the post customers customer fid note params
func (o *PostCustomersCustomerFidNoteParams) SetNote(note string) {
	o.Note = note
}

// WriteToRequest writes these params to a swagger request
func (o *PostCustomersCustomerFidNoteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Colour != nil {

		// form param colour
		var frColour string
		if o.Colour != nil {
			frColour = *o.Colour
		}
		fColour := frColour
		if fColour != "" {
			if err := r.SetFormParam("colour", fColour); err != nil {
				return err
			}
		}
	}

	// path param customerFid
	if err := r.SetPathParam("customerFid", o.CustomerFid); err != nil {
		return err
	}

	// form param note
	frNote := o.Note
	fNote := frNote
	if fNote != "" {
		if err := r.SetFormParam("note", fNote); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
