// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fortifi/go-api/models"
)

// PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysReader is a Reader for the PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDays structure.
type PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK creates a PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK with default headers values
func NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK() *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK {
	return &PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK{}
}

/*PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK handles this case with default header values.

Advance days set
*/
type PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK struct {
}

func (o *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK) Error() string {
	return fmt.Sprintf("[PUT /customers/{customerFid}/subscriptions/{subscriptionFid}/setAdvanceDays][%d] putCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK ", 200)
}

func (o *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault creates a PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault with default headers values
func NewPutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault(code int) *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault {
	return &PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault{
		_statusCode: code,
	}
}

/*PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault handles this case with default header values.

Error
*/
type PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault struct {
	_statusCode int

	Payload *models.Envelope
}

// Code gets the status code for the put customers customer fid subscriptions subscription fid set advance days default response
func (o *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault) Code() int {
	return o._statusCode
}

func (o *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault) Error() string {
	return fmt.Sprintf("[PUT /customers/{customerFid}/subscriptions/{subscriptionFid}/setAdvanceDays][%d] PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDays default  %+v", o._statusCode, o.Payload)
}

func (o *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault) GetPayload() *models.Envelope {
	return o.Payload
}

func (o *PutCustomersCustomerFidSubscriptionsSubscriptionFidSetAdvanceDaysDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Envelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
