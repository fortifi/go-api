// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpsertDevicePayload upsert device payload
//
// swagger:model UpsertDevicePayload
type UpsertDevicePayload struct {

	// The application running on the device (required)
	// Required: true
	App *string `json:"app"`

	// The version of the application
	AppVersion string `json:"appVersion,omitempty"`

	// IP Address of the visitor
	ClientIP string `json:"clientIp,omitempty"`

	// The contact FID (required one of customerFid or contactFid)
	ContactFid string `json:"contactFid,omitempty"`

	// The customer FID (required one of customerFid or contactFid)
	CustomerFid string `json:"customerFid,omitempty"`

	// The name of the device
	DeviceName string `json:"deviceName,omitempty"`

	// The type of device
	DeviceType string `json:"deviceType,omitempty"`

	// The version of the device
	DeviceVersion string `json:"deviceVersion,omitempty"`

	// The hardware id of the device (required)
	// Required: true
	HardwareID *string `json:"hardwareId"`

	// The manufacturer of the device
	Manufacturer string `json:"manufacturer,omitempty"`

	// Status of customer email opt-in
	// Enum: [no confirmed]
	OptInStatus string `json:"optInStatus,omitempty"`

	// The operating system of the device
	Os string `json:"os,omitempty"`

	// The version of the operating system
	OsVersion string `json:"osVersion,omitempty"`

	// push auth
	PushAuth string `json:"pushAuth,omitempty"`

	// push source
	// Enum: [apple firebase]
	PushSource string `json:"pushSource,omitempty"`

	// The height of the device screen
	ScreenHeight int64 `json:"screenHeight,omitempty"`

	// The width of the device screen
	ScreenWidth int64 `json:"screenWidth,omitempty"`

	// The subscription FID
	SubscriptionFid string `json:"subscriptionFid,omitempty"`
}

// Validate validates this upsert device payload
func (m *UpsertDevicePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptInStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpsertDevicePayload) validateApp(formats strfmt.Registry) error {

	if err := validate.Required("app", "body", m.App); err != nil {
		return err
	}

	return nil
}

func (m *UpsertDevicePayload) validateHardwareID(formats strfmt.Registry) error {

	if err := validate.Required("hardwareId", "body", m.HardwareID); err != nil {
		return err
	}

	return nil
}

var upsertDevicePayloadTypeOptInStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["no","confirmed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upsertDevicePayloadTypeOptInStatusPropEnum = append(upsertDevicePayloadTypeOptInStatusPropEnum, v)
	}
}

const (

	// UpsertDevicePayloadOptInStatusNo captures enum value "no"
	UpsertDevicePayloadOptInStatusNo string = "no"

	// UpsertDevicePayloadOptInStatusConfirmed captures enum value "confirmed"
	UpsertDevicePayloadOptInStatusConfirmed string = "confirmed"
)

// prop value enum
func (m *UpsertDevicePayload) validateOptInStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upsertDevicePayloadTypeOptInStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpsertDevicePayload) validateOptInStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.OptInStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOptInStatusEnum("optInStatus", "body", m.OptInStatus); err != nil {
		return err
	}

	return nil
}

var upsertDevicePayloadTypePushSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["apple","firebase"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upsertDevicePayloadTypePushSourcePropEnum = append(upsertDevicePayloadTypePushSourcePropEnum, v)
	}
}

const (

	// UpsertDevicePayloadPushSourceApple captures enum value "apple"
	UpsertDevicePayloadPushSourceApple string = "apple"

	// UpsertDevicePayloadPushSourceFirebase captures enum value "firebase"
	UpsertDevicePayloadPushSourceFirebase string = "firebase"
)

// prop value enum
func (m *UpsertDevicePayload) validatePushSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upsertDevicePayloadTypePushSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpsertDevicePayload) validatePushSource(formats strfmt.Registry) error {
	if swag.IsZero(m.PushSource) { // not required
		return nil
	}

	// value enum
	if err := m.validatePushSourceEnum("pushSource", "body", m.PushSource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upsert device payload based on context it is used
func (m *UpsertDevicePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpsertDevicePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpsertDevicePayload) UnmarshalBinary(b []byte) error {
	var res UpsertDevicePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
