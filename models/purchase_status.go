// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PurchaseStatus Purchase Status
//
// swagger:model purchaseStatus
type PurchaseStatus string

func NewPurchaseStatus(value PurchaseStatus) *PurchaseStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PurchaseStatus.
func (m PurchaseStatus) Pointer() *PurchaseStatus {
	return &m
}

const (

	// PurchaseStatusSetup captures enum value "setup"
	PurchaseStatusSetup PurchaseStatus = "setup"

	// PurchaseStatusTrial captures enum value "trial"
	PurchaseStatusTrial PurchaseStatus = "trial"

	// PurchaseStatusActive captures enum value "active"
	PurchaseStatusActive PurchaseStatus = "active"

	// PurchaseStatusInactive captures enum value "inactive"
	PurchaseStatusInactive PurchaseStatus = "inactive"

	// PurchaseStatusUpgraded captures enum value "upgraded"
	PurchaseStatusUpgraded PurchaseStatus = "upgraded"

	// PurchaseStatusSuspended captures enum value "suspended"
	PurchaseStatusSuspended PurchaseStatus = "suspended"

	// PurchaseStatusCancelled captures enum value "cancelled"
	PurchaseStatusCancelled PurchaseStatus = "cancelled"

	// PurchaseStatusDeleted captures enum value "deleted"
	PurchaseStatusDeleted PurchaseStatus = "deleted"

	// PurchaseStatusEnded captures enum value "ended"
	PurchaseStatusEnded PurchaseStatus = "ended"

	// PurchaseStatusSettingUp captures enum value "setting_up"
	PurchaseStatusSettingUp PurchaseStatus = "setting_up"

	// PurchaseStatusInvalid captures enum value "invalid"
	PurchaseStatusInvalid PurchaseStatus = "invalid"

	// PurchaseStatusProvisionPrepare captures enum value "provision_prepare"
	PurchaseStatusProvisionPrepare PurchaseStatus = "provision_prepare"

	// PurchaseStatusProvisioning captures enum value "provisioning"
	PurchaseStatusProvisioning PurchaseStatus = "provisioning"

	// PurchaseStatusProvisioned captures enum value "provisioned"
	PurchaseStatusProvisioned PurchaseStatus = "provisioned"

	// PurchaseStatusProvisioningFailed captures enum value "provisioning_failed"
	PurchaseStatusProvisioningFailed PurchaseStatus = "provisioning_failed"
)

// for schema
var purchaseStatusEnum []interface{}

func init() {
	var res []PurchaseStatus
	if err := json.Unmarshal([]byte(`["setup","trial","active","inactive","upgraded","suspended","cancelled","deleted","ended","setting_up","invalid","provision_prepare","provisioning","provisioned","provisioning_failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		purchaseStatusEnum = append(purchaseStatusEnum, v)
	}
}

func (m PurchaseStatus) validatePurchaseStatusEnum(path, location string, value PurchaseStatus) error {
	if err := validate.EnumCase(path, location, value, purchaseStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this purchase status
func (m PurchaseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePurchaseStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this purchase status based on context it is used
func (m PurchaseStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
