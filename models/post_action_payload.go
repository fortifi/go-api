// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PostActionPayload post action payload
// swagger:model PostActionPayload
type PostActionPayload struct {

	// brand fid
	// Required: true
	BrandFid BrandFid `json:"brandFid"`

	// campaign hash
	CampaignHash CampaignHash `json:"campaignHash,omitempty"`

	// client Ip
	ClientIP ClientIP `json:"clientIp,omitempty"`

	// Coupon code used for the transaction
	CouponCode string `json:"couponCode,omitempty"`

	// encoding
	Encoding Encoding `json:"encoding,omitempty"`

	// external reference
	ExternalReference VisitorExternalReference `json:"externalReference,omitempty"`

	// language
	Language Language `json:"language,omitempty"`

	// meta data
	MetaData MetaData `json:"metaData"`

	// Payment method used on this transaction
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// Product Code linked to this action
	ProductCode string `json:"productCode,omitempty"`

	// Product Term
	ProductTerm string `json:"productTerm,omitempty"`

	// Setting to true will return advertiser pixels for this event
	//
	ReturnPixels *bool `json:"returnPixels,omitempty"`

	// sid1
	Sid1 Sid1 `json:"sid1,omitempty"`

	// sid2
	Sid2 Sid2 `json:"sid2,omitempty"`

	// sid3
	Sid3 Sid3 `json:"sid3,omitempty"`

	// time
	Time IsoTime `json:"time,omitempty"`

	// Your unique transaction ID for this event e.g. Order ID
	TransactionID string `json:"transactionId,omitempty"`

	// Your unique transaction ID for this event
	TransactionValue float32 `json:"transactionValue,omitempty"`

	// user agent
	UserAgent UserAgent `json:"userAgent,omitempty"`

	// Username associated with this transaction (e.g. Join)
	Username string `json:"username,omitempty"`
}

// Validate validates this post action payload
func (m *PostActionPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrandFid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostActionPayload) validateBrandFid(formats strfmt.Registry) error {

	if err := m.BrandFid.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("brandFid")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostActionPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostActionPayload) UnmarshalBinary(b []byte) error {
	var res PostActionPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
