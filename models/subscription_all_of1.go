// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SubscriptionAllOf1 subscription all of1
// swagger:model subscriptionAllOf1
type SubscriptionAllOf1 struct {

	// amount
	Amount float32 `json:"amount,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	AutoCancelDate strfmt.DateTime `json:"autoCancelDate,omitempty"`

	// auto charge
	AutoCharge bool `json:"autoCharge,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	AutoSuspendDate strfmt.DateTime `json:"autoSuspendDate,omitempty"`

	// cancel days
	CancelDays int32 `json:"cancelDays,omitempty"`

	// cancel reason
	CancelReason string `json:"cancelReason,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// Interval in ISO 8601 standard
	Cycle string `json:"cycle,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	DateCancelled strfmt.DateTime `json:"dateCancelled,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	DateInactive strfmt.DateTime `json:"dateInactive,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	DateStateChanged strfmt.DateTime `json:"dateStateChanged,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	DateSuspended strfmt.DateTime `json:"dateSuspended,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	DateUpgraded strfmt.DateTime `json:"dateUpgraded,omitempty"`

	// discount
	Discount float32 `json:"discount,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// invoice fid
	InvoiceFid string `json:"invoiceFid,omitempty"`

	// is paid
	IsPaid bool `json:"isPaid,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	LastRenewDate strfmt.DateTime `json:"lastRenewDate,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	NextPaymentDate strfmt.DateTime `json:"nextPaymentDate,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	NextRenewDate strfmt.DateTime `json:"nextRenewDate,omitempty"`

	// next renewal amount
	NextRenewalAmount float32 `json:"nextRenewalAmount,omitempty"`

	// offer fid
	OfferFid string `json:"offerFid,omitempty"`

	// paid renewals
	PaidRenewals int32 `json:"paidRenewals,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	PaidUntil strfmt.DateTime `json:"paidUntil,omitempty"`

	// price fid
	PriceFid string `json:"priceFid,omitempty"`

	// quantity
	Quantity int32 `json:"quantity,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	RenewDate strfmt.DateTime `json:"renewDate,omitempty"`

	// renewal advance days
	RenewalAdvanceDays int32 `json:"renewalAdvanceDays,omitempty"`

	// setup amount
	SetupAmount float32 `json:"setupAmount,omitempty"`

	// setup discount
	SetupDiscount float32 `json:"setupDiscount,omitempty"`

	// should cancel
	ShouldCancel bool `json:"shouldCancel,omitempty"`

	// should suspend
	ShouldSuspend bool `json:"shouldSuspend,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// suspend days
	SuspendDays int32 `json:"suspendDays,omitempty"`

	// suspend reason
	SuspendReason string `json:"suspendReason,omitempty"`

	// tax amount
	TaxAmount float32 `json:"taxAmount,omitempty"`

	// total amount
	TotalAmount float32 `json:"totalAmount,omitempty"`

	// total renewals
	TotalRenewals int32 `json:"totalRenewals,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	TrialEndDate strfmt.DateTime `json:"trialEndDate,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	TrialStartDate strfmt.DateTime `json:"trialStartDate,omitempty"`

	// unique reference
	UniqueReference string `json:"uniqueReference,omitempty"`
}

// Validate validates this subscription all of1
func (m *SubscriptionAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionAllOf1) UnmarshalBinary(b []byte) error {
	var res SubscriptionAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
