// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PublisherType Publisher Type
//
// swagger:model PublisherType
type PublisherType string

const (

	// PublisherTypeAffiliate captures enum value "affiliate"
	PublisherTypeAffiliate PublisherType = "affiliate"

	// PublisherTypeNetwork captures enum value "network"
	PublisherTypeNetwork PublisherType = "network"

	// PublisherTypeCustomer captures enum value "customer"
	PublisherTypeCustomer PublisherType = "customer"

	// PublisherTypeDisplay captures enum value "display"
	PublisherTypeDisplay PublisherType = "display"

	// PublisherTypePriorityAffiliate captures enum value "priority_affiliate"
	PublisherTypePriorityAffiliate PublisherType = "priority_affiliate"

	// PublisherTypeOffline captures enum value "offline"
	PublisherTypeOffline PublisherType = "offline"

	// PublisherTypePpc captures enum value "ppc"
	PublisherTypePpc PublisherType = "ppc"

	// PublisherTypeInternal captures enum value "internal"
	PublisherTypeInternal PublisherType = "internal"

	// PublisherTypeSearchEngine captures enum value "search_engine"
	PublisherTypeSearchEngine PublisherType = "search_engine"

	// PublisherTypeMobile captures enum value "mobile"
	PublisherTypeMobile PublisherType = "mobile"

	// PublisherTypeEmail captures enum value "email"
	PublisherTypeEmail PublisherType = "email"

	// PublisherTypeRetarget captures enum value "retarget"
	PublisherTypeRetarget PublisherType = "retarget"

	// PublisherTypeContent captures enum value "content"
	PublisherTypeContent PublisherType = "content"
)

// for schema
var publisherTypeEnum []interface{}

func init() {
	var res []PublisherType
	if err := json.Unmarshal([]byte(`["affiliate","network","customer","display","priority_affiliate","offline","ppc","internal","search_engine","mobile","email","retarget","content"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publisherTypeEnum = append(publisherTypeEnum, v)
	}
}

func (m PublisherType) validatePublisherTypeEnum(path, location string, value PublisherType) error {
	if err := validate.EnumCase(path, location, value, publisherTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this publisher type
func (m PublisherType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePublisherTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
