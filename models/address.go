// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Address Generic Response
// swagger:model Address
type Address struct {
	Entity

	// address1
	Address1 string `json:"address1,omitempty"`

	// address2
	Address2 string `json:"address2,omitempty"`

	// address3
	Address3 string `json:"address3,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// county
	County string `json:"county,omitempty"`

	// postal code
	PostalCode string `json:"postalCode,omitempty"`

	// town
	Town string `json:"town,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Address) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		Address1 string `json:"address1,omitempty"`

		Address2 string `json:"address2,omitempty"`

		Address3 string `json:"address3,omitempty"`

		Country string `json:"country,omitempty"`

		County string `json:"county,omitempty"`

		PostalCode string `json:"postalCode,omitempty"`

		Town string `json:"town,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Address1 = dataAO1.Address1

	m.Address2 = dataAO1.Address2

	m.Address3 = dataAO1.Address3

	m.Country = dataAO1.Country

	m.County = dataAO1.County

	m.PostalCode = dataAO1.PostalCode

	m.Town = dataAO1.Town

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Address) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Address1 string `json:"address1,omitempty"`

		Address2 string `json:"address2,omitempty"`

		Address3 string `json:"address3,omitempty"`

		Country string `json:"country,omitempty"`

		County string `json:"county,omitempty"`

		PostalCode string `json:"postalCode,omitempty"`

		Town string `json:"town,omitempty"`
	}

	dataAO1.Address1 = m.Address1

	dataAO1.Address2 = m.Address2

	dataAO1.Address3 = m.Address3

	dataAO1.Country = m.Country

	dataAO1.County = m.County

	dataAO1.PostalCode = m.PostalCode

	dataAO1.Town = m.Town

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
