// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppstoreNotificationType Appstore Type
//
// swagger:model appstoreNotificationType
type AppstoreNotificationType string

func NewAppstoreNotificationType(value AppstoreNotificationType) *AppstoreNotificationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppstoreNotificationType.
func (m AppstoreNotificationType) Pointer() *AppstoreNotificationType {
	return &m
}

const (

	// AppstoreNotificationTypeAppstoreSubscriptionPurchase captures enum value "appstore_subscription_purchase"
	AppstoreNotificationTypeAppstoreSubscriptionPurchase AppstoreNotificationType = "appstore_subscription_purchase"

	// AppstoreNotificationTypeAppstoreSubscriptionCancel captures enum value "appstore_subscription_cancel"
	AppstoreNotificationTypeAppstoreSubscriptionCancel AppstoreNotificationType = "appstore_subscription_cancel"

	// AppstoreNotificationTypeAppstoreSubscriptionRenew captures enum value "appstore_subscription_renew"
	AppstoreNotificationTypeAppstoreSubscriptionRenew AppstoreNotificationType = "appstore_subscription_renew"
)

// for schema
var appstoreNotificationTypeEnum []interface{}

func init() {
	var res []AppstoreNotificationType
	if err := json.Unmarshal([]byte(`["appstore_subscription_purchase","appstore_subscription_cancel","appstore_subscription_renew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appstoreNotificationTypeEnum = append(appstoreNotificationTypeEnum, v)
	}
}

func (m AppstoreNotificationType) validateAppstoreNotificationTypeEnum(path, location string, value AppstoreNotificationType) error {
	if err := validate.EnumCase(path, location, value, appstoreNotificationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this appstore notification type
func (m AppstoreNotificationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppstoreNotificationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this appstore notification type based on context it is used
func (m AppstoreNotificationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
