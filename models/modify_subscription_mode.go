// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModifySubscriptionMode Mode to modify subscription with
//
// swagger:model ModifySubscriptionMode
type ModifySubscriptionMode string

func NewModifySubscriptionMode(value ModifySubscriptionMode) *ModifySubscriptionMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModifySubscriptionMode.
func (m ModifySubscriptionMode) Pointer() *ModifySubscriptionMode {
	return &m
}

const (

	// ModifySubscriptionModeProrate captures enum value "prorate"
	ModifySubscriptionModeProrate ModifySubscriptionMode = "prorate"

	// ModifySubscriptionModeExtend captures enum value "extend"
	ModifySubscriptionModeExtend ModifySubscriptionMode = "extend"

	// ModifySubscriptionModeReplace captures enum value "replace"
	ModifySubscriptionModeReplace ModifySubscriptionMode = "replace"
)

// for schema
var modifySubscriptionModeEnum []interface{}

func init() {
	var res []ModifySubscriptionMode
	if err := json.Unmarshal([]byte(`["prorate","extend","replace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modifySubscriptionModeEnum = append(modifySubscriptionModeEnum, v)
	}
}

func (m ModifySubscriptionMode) validateModifySubscriptionModeEnum(path, location string, value ModifySubscriptionMode) error {
	if err := validate.EnumCase(path, location, value, modifySubscriptionModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this modify subscription mode
func (m ModifySubscriptionMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModifySubscriptionModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this modify subscription mode based on context it is used
func (m ModifySubscriptionMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
