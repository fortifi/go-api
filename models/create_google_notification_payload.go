// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateGoogleNotificationPayload create google notification payload
//
// swagger:model CreateGoogleNotificationPayload
type CreateGoogleNotificationPayload struct {

	// The type of notification AppStoreNotificationType
	// Required: true
	NotificationType *string `json:"notificationType"`

	// The package name of the application e.g com.company.android
	// Required: true
	PackageName *string `json:"packageName"`

	// The purchase token
	// Required: true
	PurchaseToken *string `json:"purchaseToken"`

	// renewal date
	RenewalDate string `json:"renewalDate,omitempty"`

	// The subscription ID (SKU). e.g com.company.android.year.12
	// Required: true
	SubscriptionID *string `json:"subscriptionId"`
}

// Validate validates this create google notification payload
func (m *CreateGoogleNotificationPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateGoogleNotificationPayload) validateNotificationType(formats strfmt.Registry) error {

	if err := validate.Required("notificationType", "body", m.NotificationType); err != nil {
		return err
	}

	return nil
}

func (m *CreateGoogleNotificationPayload) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("packageName", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

func (m *CreateGoogleNotificationPayload) validatePurchaseToken(formats strfmt.Registry) error {

	if err := validate.Required("purchaseToken", "body", m.PurchaseToken); err != nil {
		return err
	}

	return nil
}

func (m *CreateGoogleNotificationPayload) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionId", "body", m.SubscriptionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create google notification payload based on context it is used
func (m *CreateGoogleNotificationPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateGoogleNotificationPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateGoogleNotificationPayload) UnmarshalBinary(b []byte) error {
	var res CreateGoogleNotificationPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
