// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TicketStatus Ticket Status
// swagger:model ticketStatus
type TicketStatus string

const (

	// TicketStatusOpen captures enum value "open"
	TicketStatusOpen TicketStatus = "open"

	// TicketStatusOnHold captures enum value "on_hold"
	TicketStatusOnHold TicketStatus = "on_hold"

	// TicketStatusPendingReply captures enum value "pending_reply"
	TicketStatusPendingReply TicketStatus = "pending_reply"

	// TicketStatusResolved captures enum value "resolved"
	TicketStatusResolved TicketStatus = "resolved"

	// TicketStatusInvalid captures enum value "invalid"
	TicketStatusInvalid TicketStatus = "invalid"

	// TicketStatusDuplicate captures enum value "duplicate"
	TicketStatusDuplicate TicketStatus = "duplicate"

	// TicketStatusClosed captures enum value "closed"
	TicketStatusClosed TicketStatus = "closed"

	// TicketStatusTrash captures enum value "trash"
	TicketStatusTrash TicketStatus = "trash"
)

// for schema
var ticketStatusEnum []interface{}

func init() {
	var res []TicketStatus
	if err := json.Unmarshal([]byte(`["open","on_hold","pending_reply","resolved","invalid","duplicate","closed","trash"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ticketStatusEnum = append(ticketStatusEnum, v)
	}
}

func (m TicketStatus) validateTicketStatusEnum(path, location string, value TicketStatus) error {
	if err := validate.Enum(path, location, value, ticketStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this ticket status
func (m TicketStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTicketStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
