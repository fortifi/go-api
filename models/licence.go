// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Licence licence
// swagger:model Licence
type Licence struct {

	// auto cancel date
	AutoCancelDate IsoTime `json:"autoCancelDate,omitempty"`

	// auto suspend date
	AutoSuspendDate IsoTime `json:"autoSuspendDate,omitempty"`

	// customer fid
	CustomerFid string `json:"customerFid,omitempty"`

	// cycle exact
	CycleExact string `json:"cycleExact,omitempty"`

	// cycle term
	CycleTerm string `json:"cycleTerm,omitempty"`

	// cycle type
	CycleType string `json:"cycleType,omitempty"`

	// date created
	DateCreated IsoTime `json:"dateCreated,omitempty"`

	// end date
	EndDate IsoTime `json:"endDate,omitempty"`

	// last renew date
	LastRenewDate IsoTime `json:"lastRenewDate,omitempty"`

	// next renew date
	NextRenewDate IsoTime `json:"nextRenewDate,omitempty"`

	// purchase fid
	PurchaseFid string `json:"purchaseFid,omitempty"`

	// renew date
	RenewDate IsoTime `json:"renewDate,omitempty"`

	// start date
	StartDate IsoTime `json:"startDate,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// trial end date
	TrialEndDate IsoTime `json:"trialEndDate,omitempty"`

	// trial start date
	TrialStartDate IsoTime `json:"trialStartDate,omitempty"`
}

// Validate validates this licence
func (m *Licence) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Licence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Licence) UnmarshalBinary(b []byte) error {
	var res Licence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
