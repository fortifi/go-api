// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CreateOrderPayload create order payload
// swagger:model CreateOrderPayload
type CreateOrderPayload struct {

	// brand fid
	BrandFid BrandFid `json:"brandFid,omitempty"`

	// client Ip
	ClientIP ClientIP `json:"clientIp,omitempty"`

	// customer fid
	CustomerFid CustomerFid `json:"customerFid,omitempty"`

	// Offer FIDs to apply to the order
	OfferFids []string `json:"offerFids"`

	// payment account fid
	PaymentAccountFid PaymentAccountFid `json:"paymentAccountFid,omitempty"`

	// Product price FIDs to add
	ProductPriceFids []string `json:"productPriceFids"`

	// type
	Type CreateOrderType `json:"type,omitempty"`

	// user agent
	UserAgent UserAgent `json:"userAgent,omitempty"`
}

// Validate validates this create order payload
func (m *CreateOrderPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOfferFids(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProductPriceFids(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOrderPayload) validateOfferFids(formats strfmt.Registry) error {

	if swag.IsZero(m.OfferFids) { // not required
		return nil
	}

	return nil
}

func (m *CreateOrderPayload) validateProductPriceFids(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductPriceFids) { // not required
		return nil
	}

	return nil
}

func (m *CreateOrderPayload) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateOrderPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOrderPayload) UnmarshalBinary(b []byte) error {
	var res CreateOrderPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
