// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerContact Customer Contact
// swagger:model CustomerContact
type CustomerContact struct {
	Entity

	// birthday
	Birthday string `json:"birthday,omitempty"`

	// default address fid
	DefaultAddressFid string `json:"defaultAddressFid,omitempty"`

	// default email fid
	DefaultEmailFid string `json:"defaultEmailFid,omitempty"`

	// default phone fid
	DefaultPhoneFid string `json:"defaultPhoneFid,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// job title
	JobTitle string `json:"jobTitle,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// middle names
	MiddleNames string `json:"middleNames,omitempty"`

	// nickname
	Nickname string `json:"nickname,omitempty"`

	// owner fid
	OwnerFid string `json:"ownerFid,omitempty"`

	// prefix
	Prefix string `json:"prefix,omitempty"`

	// suffix
	Suffix string `json:"suffix,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CustomerContact) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		Birthday string `json:"birthday,omitempty"`

		DefaultAddressFid string `json:"defaultAddressFid,omitempty"`

		DefaultEmailFid string `json:"defaultEmailFid,omitempty"`

		DefaultPhoneFid string `json:"defaultPhoneFid,omitempty"`

		FirstName string `json:"firstName,omitempty"`

		JobTitle string `json:"jobTitle,omitempty"`

		LastName string `json:"lastName,omitempty"`

		MiddleNames string `json:"middleNames,omitempty"`

		Nickname string `json:"nickname,omitempty"`

		OwnerFid string `json:"ownerFid,omitempty"`

		Prefix string `json:"prefix,omitempty"`

		Suffix string `json:"suffix,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Birthday = dataAO1.Birthday

	m.DefaultAddressFid = dataAO1.DefaultAddressFid

	m.DefaultEmailFid = dataAO1.DefaultEmailFid

	m.DefaultPhoneFid = dataAO1.DefaultPhoneFid

	m.FirstName = dataAO1.FirstName

	m.JobTitle = dataAO1.JobTitle

	m.LastName = dataAO1.LastName

	m.MiddleNames = dataAO1.MiddleNames

	m.Nickname = dataAO1.Nickname

	m.OwnerFid = dataAO1.OwnerFid

	m.Prefix = dataAO1.Prefix

	m.Suffix = dataAO1.Suffix

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CustomerContact) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Birthday string `json:"birthday,omitempty"`

		DefaultAddressFid string `json:"defaultAddressFid,omitempty"`

		DefaultEmailFid string `json:"defaultEmailFid,omitempty"`

		DefaultPhoneFid string `json:"defaultPhoneFid,omitempty"`

		FirstName string `json:"firstName,omitempty"`

		JobTitle string `json:"jobTitle,omitempty"`

		LastName string `json:"lastName,omitempty"`

		MiddleNames string `json:"middleNames,omitempty"`

		Nickname string `json:"nickname,omitempty"`

		OwnerFid string `json:"ownerFid,omitempty"`

		Prefix string `json:"prefix,omitempty"`

		Suffix string `json:"suffix,omitempty"`
	}

	dataAO1.Birthday = m.Birthday

	dataAO1.DefaultAddressFid = m.DefaultAddressFid

	dataAO1.DefaultEmailFid = m.DefaultEmailFid

	dataAO1.DefaultPhoneFid = m.DefaultPhoneFid

	dataAO1.FirstName = m.FirstName

	dataAO1.JobTitle = m.JobTitle

	dataAO1.LastName = m.LastName

	dataAO1.MiddleNames = m.MiddleNames

	dataAO1.Nickname = m.Nickname

	dataAO1.OwnerFid = m.OwnerFid

	dataAO1.Prefix = m.Prefix

	dataAO1.Suffix = m.Suffix

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this customer contact
func (m *CustomerContact) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerContact) UnmarshalBinary(b []byte) error {
	var res CustomerContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
