// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentServiceProcessor Payment Service Processor Type
// swagger:model PaymentServiceProcessor
type PaymentServiceProcessor string

const (

	// PaymentServiceProcessorPaypal captures enum value "paypal"
	PaymentServiceProcessorPaypal PaymentServiceProcessor = "paypal"

	// PaymentServiceProcessorWire captures enum value "wire"
	PaymentServiceProcessorWire PaymentServiceProcessor = "wire"

	// PaymentServiceProcessorBlackhole captures enum value "blackhole"
	PaymentServiceProcessorBlackhole PaymentServiceProcessor = "blackhole"

	// PaymentServiceProcessorCheque captures enum value "cheque"
	PaymentServiceProcessorCheque PaymentServiceProcessor = "cheque"

	// PaymentServiceProcessorPrepayment captures enum value "prepayment"
	PaymentServiceProcessorPrepayment PaymentServiceProcessor = "prepayment"

	// PaymentServiceProcessorFortifipay captures enum value "fortifipay"
	PaymentServiceProcessorFortifipay PaymentServiceProcessor = "fortifipay"

	// PaymentServiceProcessorCoinbase captures enum value "coinbase"
	PaymentServiceProcessorCoinbase PaymentServiceProcessor = "coinbase"
)

// for schema
var paymentServiceProcessorEnum []interface{}

func init() {
	var res []PaymentServiceProcessor
	if err := json.Unmarshal([]byte(`["paypal","wire","blackhole","cheque","prepayment","fortifipay","coinbase"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentServiceProcessorEnum = append(paymentServiceProcessorEnum, v)
	}
}

func (m PaymentServiceProcessor) validatePaymentServiceProcessorEnum(path, location string, value PaymentServiceProcessor) error {
	if err := validate.Enum(path, location, value, paymentServiceProcessorEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment service processor
func (m PaymentServiceProcessor) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentServiceProcessorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
