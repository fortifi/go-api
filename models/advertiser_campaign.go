// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdvertiserCampaign DEPRECATED
//
// swagger:model AdvertiserCampaign
type AdvertiserCampaign struct {
	Entity

	// affiliate fid
	AffiliateFid string `json:"affiliateFid,omitempty"`

	// brand fid
	BrandFid string `json:"brandFid,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AdvertiserCampaign) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		AffiliateFid string `json:"affiliateFid,omitempty"`

		BrandFid string `json:"brandFid,omitempty"`

		Hash string `json:"hash,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AffiliateFid = dataAO1.AffiliateFid

	m.BrandFid = dataAO1.BrandFid

	m.Hash = dataAO1.Hash

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AdvertiserCampaign) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AffiliateFid string `json:"affiliateFid,omitempty"`

		BrandFid string `json:"brandFid,omitempty"`

		Hash string `json:"hash,omitempty"`
	}

	dataAO1.AffiliateFid = m.AffiliateFid

	dataAO1.BrandFid = m.BrandFid

	dataAO1.Hash = m.Hash

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this advertiser campaign
func (m *AdvertiserCampaign) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this advertiser campaign based on the context it is used
func (m *AdvertiserCampaign) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AdvertiserCampaign) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvertiserCampaign) UnmarshalBinary(b []byte) error {
	var res AdvertiserCampaign
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
