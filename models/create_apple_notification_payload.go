// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAppleNotificationPayload create apple notification payload
//
// swagger:model CreateAppleNotificationPayload
type CreateAppleNotificationPayload struct {

	// The country code of the subscription
	// Required: true
	CountryCode *string `json:"countryCode"`

	// The currency code of the subscription
	// Required: true
	CurrencyCode *string `json:"currencyCode"`

	// The decoded raw receipt
	Data string `json:"data,omitempty"`

	// The type of notification AppStoreNotificationType
	// Required: true
	NotificationType *string `json:"notificationType"`

	// The notification UUID
	// Required: true
	NotificationUUID *string `json:"notificationUUID"`

	// The original transaction ID to link receipts
	// Required: true
	OriginalTransactionID *string `json:"originalTransactionId"`

	// The package name of the application e.g com.company.android
	// Required: true
	PackageName *string `json:"packageName"`

	// The price of the subscription
	// Required: true
	Price *string `json:"price"`

	// The Raw Receipt
	// Required: true
	RawReceipt *string `json:"rawReceipt"`

	// The subscription ID (SKU). e.g com.company.android.year.12
	// Required: true
	SubscriptionID *string `json:"subscriptionId"`
}

// Validate validates this create apple notification payload
func (m *CreateAppleNotificationPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawReceipt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAppleNotificationPayload) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validateCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("currencyCode", "body", m.CurrencyCode); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validateNotificationType(formats strfmt.Registry) error {

	if err := validate.Required("notificationType", "body", m.NotificationType); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validateNotificationUUID(formats strfmt.Registry) error {

	if err := validate.Required("notificationUUID", "body", m.NotificationUUID); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validateOriginalTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("originalTransactionId", "body", m.OriginalTransactionID); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("packageName", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validateRawReceipt(formats strfmt.Registry) error {

	if err := validate.Required("rawReceipt", "body", m.RawReceipt); err != nil {
		return err
	}

	return nil
}

func (m *CreateAppleNotificationPayload) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionId", "body", m.SubscriptionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create apple notification payload based on context it is used
func (m *CreateAppleNotificationPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAppleNotificationPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAppleNotificationPayload) UnmarshalBinary(b []byte) error {
	var res CreateAppleNotificationPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
