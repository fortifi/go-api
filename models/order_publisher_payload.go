// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderPublisherPayload order publisher payload
// swagger:model OrderPublisherPayload
type OrderPublisherPayload struct {

	// (required) Marketing Action to trigger e.g. acquisition, lead
	ActionKey string `json:"actionKey,omitempty"`

	// Campaign hash to allocate this action to (leave blank to use visitor ID values)
	CampaignHash string `json:"campaignHash,omitempty"`

	// (required) Trigger the publisher action when the order gets to this state
	// Enum: [approved setup complete]
	OnState string `json:"onState,omitempty"`

	// Sub Tracking ID 1 (leave blank to use visitor ID values)
	Sid1 string `json:"sid1,omitempty"`

	// Sub Tracking ID 2 (leave blank to use visitor ID values)
	Sid2 string `json:"sid2,omitempty"`

	// Sub Tracking ID 3 (leave blank to use visitor ID values)
	Sid3 string `json:"sid3,omitempty"`

	// Your reference for the user (if visitor actions have been triggered before with this ID before, the visitor ID property is not required, and can be looked up by this id.
	UserReference string `json:"userReference,omitempty"`

	// Visitor ID from the browser cookie
	VisitorID string `json:"visitorId,omitempty"`
}

// Validate validates this order publisher payload
func (m *OrderPublisherPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOnState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderPublisherPayloadTypeOnStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["approved","setup","complete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderPublisherPayloadTypeOnStatePropEnum = append(orderPublisherPayloadTypeOnStatePropEnum, v)
	}
}

const (

	// OrderPublisherPayloadOnStateApproved captures enum value "approved"
	OrderPublisherPayloadOnStateApproved string = "approved"

	// OrderPublisherPayloadOnStateSetup captures enum value "setup"
	OrderPublisherPayloadOnStateSetup string = "setup"

	// OrderPublisherPayloadOnStateComplete captures enum value "complete"
	OrderPublisherPayloadOnStateComplete string = "complete"
)

// prop value enum
func (m *OrderPublisherPayload) validateOnStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderPublisherPayloadTypeOnStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OrderPublisherPayload) validateOnState(formats strfmt.Registry) error {

	if swag.IsZero(m.OnState) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnStateEnum("onState", "body", m.OnState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderPublisherPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderPublisherPayload) UnmarshalBinary(b []byte) error {
	var res OrderPublisherPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
