// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOfferAllOf1 product offer all of1
// swagger:model productOfferAllOf1
type ProductOfferAllOf1 struct {

	// apply fid
	ApplyFid string `json:"applyFid,omitempty"`

	// coupon code
	CouponCode string `json:"couponCode,omitempty"`

	// discount amount
	DiscountAmount float32 `json:"discountAmount,omitempty"`

	// discount type
	DiscountType DiscountType `json:"discountType,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	ExpiryTime strfmt.DateTime `json:"expiryTime,omitempty"`

	// max usages
	MaxUsages int32 `json:"maxUsages,omitempty"`

	// Interval in ISO 8601 standard
	Period string `json:"period,omitempty"`

	// restrictive
	Restrictive bool `json:"restrictive,omitempty"`

	// setup discount amount
	SetupDiscountAmount float32 `json:"setupDiscountAmount,omitempty"`

	// setup discount type
	SetupDiscountType DiscountType `json:"setupDiscountType,omitempty"`

	// term
	Term int32 `json:"term,omitempty"`

	// term type
	TermType CycleTermType `json:"termType,omitempty"`
}

// Validate validates this product offer all of1
func (m *ProductOfferAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetupDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOfferAllOf1) validateDiscountType(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscountType) { // not required
		return nil
	}

	if err := m.DiscountType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("discountType")
		}
		return err
	}

	return nil
}

func (m *ProductOfferAllOf1) validateExpiryTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryTime", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOfferAllOf1) validateSetupDiscountType(formats strfmt.Registry) error {

	if swag.IsZero(m.SetupDiscountType) { // not required
		return nil
	}

	if err := m.SetupDiscountType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setupDiscountType")
		}
		return err
	}

	return nil
}

func (m *ProductOfferAllOf1) validateTermType(formats strfmt.Registry) error {

	if swag.IsZero(m.TermType) { // not required
		return nil
	}

	if err := m.TermType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("termType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOfferAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOfferAllOf1) UnmarshalBinary(b []byte) error {
	var res ProductOfferAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
