// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetentionFlowReason Retention Flow Reason
//
// swagger:model RetentionFlowReason
type RetentionFlowReason struct {
	Entity

	// The FID of the product or product group this applies to
	AppliesToFid string `json:"appliesToFid,omitempty"`

	// the key to pass through when starting a cancel flow
	Key string `json:"key,omitempty"`

	// The text displayed to an agent or customer
	Reason string `json:"reason,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RetentionFlowReason) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		AppliesToFid string `json:"appliesToFid,omitempty"`

		Key string `json:"key,omitempty"`

		Reason string `json:"reason,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AppliesToFid = dataAO1.AppliesToFid

	m.Key = dataAO1.Key

	m.Reason = dataAO1.Reason

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RetentionFlowReason) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AppliesToFid string `json:"appliesToFid,omitempty"`

		Key string `json:"key,omitempty"`

		Reason string `json:"reason,omitempty"`
	}

	dataAO1.AppliesToFid = m.AppliesToFid

	dataAO1.Key = m.Key

	dataAO1.Reason = m.Reason

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this retention flow reason
func (m *RetentionFlowReason) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this retention flow reason based on the context it is used
func (m *RetentionFlowReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *RetentionFlowReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetentionFlowReason) UnmarshalBinary(b []byte) error {
	var res RetentionFlowReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
