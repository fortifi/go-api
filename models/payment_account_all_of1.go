// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PaymentAccountAllOf1 payment account all of1
// swagger:model paymentAccountAllOf1
type PaymentAccountAllOf1 struct {

	// account type
	AccountType PaymentAccountType `json:"accountType,omitempty"`

	// payment method
	PaymentMethod PaymentMethod `json:"paymentMethod,omitempty"`

	// payment mode
	PaymentMode PaymentMode `json:"paymentMode,omitempty"`
}

// Validate validates this payment account all of1
func (m *PaymentAccountAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAccountAllOf1) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	if err := m.AccountType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accountType")
		}
		return err
	}

	return nil
}

func (m *PaymentAccountAllOf1) validatePaymentMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	if err := m.PaymentMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentMethod")
		}
		return err
	}

	return nil
}

func (m *PaymentAccountAllOf1) validatePaymentMode(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMode) { // not required
		return nil
	}

	if err := m.PaymentMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAccountAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAccountAllOf1) UnmarshalBinary(b []byte) error {
	var res PaymentAccountAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
