// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Period A purchase period
//
// swagger:model Period
type Period struct {
	Entity

	// charge date
	ChargeDate int64 `json:"chargeDate,omitempty"`

	// credited amount
	CreditedAmount float32 `json:"creditedAmount,omitempty"`

	// outstanding amount
	OutstandingAmount float32 `json:"outstandingAmount,omitempty"`

	// payment fid
	PaymentFid string `json:"paymentFid,omitempty"`

	// period end
	PeriodEnd int64 `json:"periodEnd,omitempty"`

	// period fid
	PeriodFid string `json:"periodFid,omitempty"`

	// period start
	PeriodStart int64 `json:"periodStart,omitempty"`

	// refund amount
	RefundAmount float32 `json:"refundAmount,omitempty"`

	// refund reason
	RefundReason string `json:"refundReason,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tax amount
	TaxAmount float32 `json:"taxAmount,omitempty"`

	// total amount
	TotalAmount float32 `json:"totalAmount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Period) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		ChargeDate int64 `json:"chargeDate,omitempty"`

		CreditedAmount float32 `json:"creditedAmount,omitempty"`

		OutstandingAmount float32 `json:"outstandingAmount,omitempty"`

		PaymentFid string `json:"paymentFid,omitempty"`

		PeriodEnd int64 `json:"periodEnd,omitempty"`

		PeriodFid string `json:"periodFid,omitempty"`

		PeriodStart int64 `json:"periodStart,omitempty"`

		RefundAmount float32 `json:"refundAmount,omitempty"`

		RefundReason string `json:"refundReason,omitempty"`

		Status string `json:"status,omitempty"`

		TaxAmount float32 `json:"taxAmount,omitempty"`

		TotalAmount float32 `json:"totalAmount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ChargeDate = dataAO1.ChargeDate

	m.CreditedAmount = dataAO1.CreditedAmount

	m.OutstandingAmount = dataAO1.OutstandingAmount

	m.PaymentFid = dataAO1.PaymentFid

	m.PeriodEnd = dataAO1.PeriodEnd

	m.PeriodFid = dataAO1.PeriodFid

	m.PeriodStart = dataAO1.PeriodStart

	m.RefundAmount = dataAO1.RefundAmount

	m.RefundReason = dataAO1.RefundReason

	m.Status = dataAO1.Status

	m.TaxAmount = dataAO1.TaxAmount

	m.TotalAmount = dataAO1.TotalAmount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Period) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ChargeDate int64 `json:"chargeDate,omitempty"`

		CreditedAmount float32 `json:"creditedAmount,omitempty"`

		OutstandingAmount float32 `json:"outstandingAmount,omitempty"`

		PaymentFid string `json:"paymentFid,omitempty"`

		PeriodEnd int64 `json:"periodEnd,omitempty"`

		PeriodFid string `json:"periodFid,omitempty"`

		PeriodStart int64 `json:"periodStart,omitempty"`

		RefundAmount float32 `json:"refundAmount,omitempty"`

		RefundReason string `json:"refundReason,omitempty"`

		Status string `json:"status,omitempty"`

		TaxAmount float32 `json:"taxAmount,omitempty"`

		TotalAmount float32 `json:"totalAmount,omitempty"`
	}

	dataAO1.ChargeDate = m.ChargeDate

	dataAO1.CreditedAmount = m.CreditedAmount

	dataAO1.OutstandingAmount = m.OutstandingAmount

	dataAO1.PaymentFid = m.PaymentFid

	dataAO1.PeriodEnd = m.PeriodEnd

	dataAO1.PeriodFid = m.PeriodFid

	dataAO1.PeriodStart = m.PeriodStart

	dataAO1.RefundAmount = m.RefundAmount

	dataAO1.RefundReason = m.RefundReason

	dataAO1.Status = m.Status

	dataAO1.TaxAmount = m.TaxAmount

	dataAO1.TotalAmount = m.TotalAmount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this period
func (m *Period) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this period based on the context it is used
func (m *Period) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Period) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Period) UnmarshalBinary(b []byte) error {
	var res Period
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
