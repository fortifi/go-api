// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustomerAccountType Account Type
//
// swagger:model customerAccountType
type CustomerAccountType string

func NewCustomerAccountType(value CustomerAccountType) *CustomerAccountType {
	v := value
	return &v
}

const (

	// CustomerAccountTypeUnknown captures enum value "unknown"
	CustomerAccountTypeUnknown CustomerAccountType = "unknown"

	// CustomerAccountTypeStudent captures enum value "student"
	CustomerAccountTypeStudent CustomerAccountType = "student"

	// CustomerAccountTypeCharity captures enum value "charity"
	CustomerAccountTypeCharity CustomerAccountType = "charity"

	// CustomerAccountTypeBusiness captures enum value "business"
	CustomerAccountTypeBusiness CustomerAccountType = "business"

	// CustomerAccountTypeResidential captures enum value "residential"
	CustomerAccountTypeResidential CustomerAccountType = "residential"

	// CustomerAccountTypeEnterprise captures enum value "enterprise"
	CustomerAccountTypeEnterprise CustomerAccountType = "enterprise"

	// CustomerAccountTypeGroup captures enum value "group"
	CustomerAccountTypeGroup CustomerAccountType = "group"
)

// for schema
var customerAccountTypeEnum []interface{}

func init() {
	var res []CustomerAccountType
	if err := json.Unmarshal([]byte(`["unknown","student","charity","business","residential","enterprise","group"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerAccountTypeEnum = append(customerAccountTypeEnum, v)
	}
}

func (m CustomerAccountType) validateCustomerAccountTypeEnum(path, location string, value CustomerAccountType) error {
	if err := validate.EnumCase(path, location, value, customerAccountTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this customer account type
func (m CustomerAccountType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCustomerAccountTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this customer account type based on context it is used
func (m CustomerAccountType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
