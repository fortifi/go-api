// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustomerAccountStatus Account Status
//
// swagger:model customerAccountStatus
type CustomerAccountStatus string

func NewCustomerAccountStatus(value CustomerAccountStatus) *CustomerAccountStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CustomerAccountStatus.
func (m CustomerAccountStatus) Pointer() *CustomerAccountStatus {
	return &m
}

const (

	// CustomerAccountStatusSetup captures enum value "setup"
	CustomerAccountStatusSetup CustomerAccountStatus = "setup"

	// CustomerAccountStatusActive captures enum value "active"
	CustomerAccountStatusActive CustomerAccountStatus = "active"

	// CustomerAccountStatusSuspended captures enum value "suspended"
	CustomerAccountStatusSuspended CustomerAccountStatus = "suspended"

	// CustomerAccountStatusExpired captures enum value "expired"
	CustomerAccountStatusExpired CustomerAccountStatus = "expired"

	// CustomerAccountStatusCancelled captures enum value "cancelled"
	CustomerAccountStatusCancelled CustomerAccountStatus = "cancelled"
)

// for schema
var customerAccountStatusEnum []interface{}

func init() {
	var res []CustomerAccountStatus
	if err := json.Unmarshal([]byte(`["setup","active","suspended","expired","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerAccountStatusEnum = append(customerAccountStatusEnum, v)
	}
}

func (m CustomerAccountStatus) validateCustomerAccountStatusEnum(path, location string, value CustomerAccountStatus) error {
	if err := validate.EnumCase(path, location, value, customerAccountStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this customer account status
func (m CustomerAccountStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCustomerAccountStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this customer account status based on context it is used
func (m CustomerAccountStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
