// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PaymentCard Generic Response
// swagger:model PaymentCard
type PaymentCard struct {
	Entity

	// card type
	CardType string `json:"cardType,omitempty"`

	// expiry month
	ExpiryMonth float64 `json:"expiryMonth,omitempty"`

	// expiry year
	ExpiryYear float64 `json:"expiryYear,omitempty"`

	// issue
	Issue float64 `json:"issue,omitempty"`

	// last4
	Last4 float64 `json:"last4,omitempty"`

	// name on card
	NameOnCard string `json:"nameOnCard,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PaymentCard) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		CardType string `json:"cardType,omitempty"`

		ExpiryMonth float64 `json:"expiryMonth,omitempty"`

		ExpiryYear float64 `json:"expiryYear,omitempty"`

		Issue float64 `json:"issue,omitempty"`

		Last4 float64 `json:"last4,omitempty"`

		NameOnCard string `json:"nameOnCard,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CardType = dataAO1.CardType

	m.ExpiryMonth = dataAO1.ExpiryMonth

	m.ExpiryYear = dataAO1.ExpiryYear

	m.Issue = dataAO1.Issue

	m.Last4 = dataAO1.Last4

	m.NameOnCard = dataAO1.NameOnCard

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PaymentCard) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		CardType string `json:"cardType,omitempty"`

		ExpiryMonth float64 `json:"expiryMonth,omitempty"`

		ExpiryYear float64 `json:"expiryYear,omitempty"`

		Issue float64 `json:"issue,omitempty"`

		Last4 float64 `json:"last4,omitempty"`

		NameOnCard string `json:"nameOnCard,omitempty"`
	}

	dataAO1.CardType = m.CardType

	dataAO1.ExpiryMonth = m.ExpiryMonth

	dataAO1.ExpiryYear = m.ExpiryYear

	dataAO1.Issue = m.Issue

	dataAO1.Last4 = m.Last4

	dataAO1.NameOnCard = m.NameOnCard

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this payment card
func (m *PaymentCard) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentCard) UnmarshalBinary(b []byte) error {
	var res PaymentCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
