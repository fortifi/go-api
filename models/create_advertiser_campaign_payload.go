// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CreateAdvertiserCampaignPayload Payload for creating an advertiser campaign
// swagger:model CreateAdvertiserCampaignPayload
type CreateAdvertiserCampaignPayload struct {

	// brand fid
	// Required: true
	BrandFid BrandFid `json:"brandFid"`

	// display name
	// Required: true
	DisplayName DisplayName `json:"displayName"`
}

// Validate validates this create advertiser campaign payload
func (m *CreateAdvertiserCampaignPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrandFid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAdvertiserCampaignPayload) validateBrandFid(formats strfmt.Registry) error {

	if err := m.BrandFid.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("brandFid")
		}
		return err
	}

	return nil
}

func (m *CreateAdvertiserCampaignPayload) validateDisplayName(formats strfmt.Registry) error {

	if err := m.DisplayName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("displayName")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAdvertiserCampaignPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAdvertiserCampaignPayload) UnmarshalBinary(b []byte) error {
	var res CreateAdvertiserCampaignPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
