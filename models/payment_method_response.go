// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentMethodResponse Payment Method Response
// swagger:model PaymentMethodResponse
type PaymentMethodResponse struct {
	Entity

	// account holder
	AccountHolder string `json:"accountHolder,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	ExpiryDate strfmt.DateTime `json:"expiryDate,omitempty"`

	// issue number
	IssueNumber string `json:"issueNumber,omitempty"`

	// issuer name
	IssuerName string `json:"issuerName,omitempty"`

	// last4
	Last4 string `json:"last4,omitempty"`

	// method scheme
	MethodScheme string `json:"methodScheme,omitempty"`

	// method sub type
	MethodSubType string `json:"methodSubType,omitempty"`

	// method type
	MethodType string `json:"methodType,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	ValidFromDate strfmt.DateTime `json:"validFromDate,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PaymentMethodResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		AccountHolder string `json:"accountHolder,omitempty"`

		ExpiryDate strfmt.DateTime `json:"expiryDate,omitempty"`

		IssueNumber string `json:"issueNumber,omitempty"`

		IssuerName string `json:"issuerName,omitempty"`

		Last4 string `json:"last4,omitempty"`

		MethodScheme string `json:"methodScheme,omitempty"`

		MethodSubType string `json:"methodSubType,omitempty"`

		MethodType string `json:"methodType,omitempty"`

		ValidFromDate strfmt.DateTime `json:"validFromDate,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountHolder = dataAO1.AccountHolder

	m.ExpiryDate = dataAO1.ExpiryDate

	m.IssueNumber = dataAO1.IssueNumber

	m.IssuerName = dataAO1.IssuerName

	m.Last4 = dataAO1.Last4

	m.MethodScheme = dataAO1.MethodScheme

	m.MethodSubType = dataAO1.MethodSubType

	m.MethodType = dataAO1.MethodType

	m.ValidFromDate = dataAO1.ValidFromDate

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PaymentMethodResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AccountHolder string `json:"accountHolder,omitempty"`

		ExpiryDate strfmt.DateTime `json:"expiryDate,omitempty"`

		IssueNumber string `json:"issueNumber,omitempty"`

		IssuerName string `json:"issuerName,omitempty"`

		Last4 string `json:"last4,omitempty"`

		MethodScheme string `json:"methodScheme,omitempty"`

		MethodSubType string `json:"methodSubType,omitempty"`

		MethodType string `json:"methodType,omitempty"`

		ValidFromDate strfmt.DateTime `json:"validFromDate,omitempty"`
	}

	dataAO1.AccountHolder = m.AccountHolder

	dataAO1.ExpiryDate = m.ExpiryDate

	dataAO1.IssueNumber = m.IssueNumber

	dataAO1.IssuerName = m.IssuerName

	dataAO1.Last4 = m.Last4

	dataAO1.MethodScheme = m.MethodScheme

	dataAO1.MethodSubType = m.MethodSubType

	dataAO1.MethodType = m.MethodType

	dataAO1.ValidFromDate = m.ValidFromDate

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this payment method response
func (m *PaymentMethodResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFromDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMethodResponse) validateExpiryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryDate", "body", "date-time", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodResponse) validateValidFromDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidFromDate) { // not required
		return nil
	}

	if err := validate.FormatOf("validFromDate", "body", "date-time", m.ValidFromDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentMethodResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentMethodResponse) UnmarshalBinary(b []byte) error {
	var res PaymentMethodResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
